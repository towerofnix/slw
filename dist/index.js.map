{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/pleasejs/dist/Please.js","node_modules/toml/index.js","node_modules/toml/lib/compiler.js","node_modules/toml/lib/parser.js","src/Entity.js","src/Level.js","src/SLW.js","src/Text.js","src/Tile.js","src/index.js","src/levels.toml","src/util.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","define","amd","this","Math","random","floor","max","min","F","HSV_to_HEX","HSV_to_RGB","g","b","console","error","hasOwnProperty","charCodeAt","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","hue","saturation","value","base_color","greyscale","grayscale","golden","full_random","colors_returned","format","seed","c","scheme_type","h","NAME_to_HEX","toLowerCase","NAME_to_RGB","HEX_to_RGB","NAME_to_HSV","HEX_to_HSV","replace","exec","parseInt","RGB_to_HEX","toString","slice","v","RGB_to_HSV","make_scheme","d","push","abs","make_color","match","m","E","p","make_contrast","parser","compiler","parse","input","nodes","compile","reduce","node","type","assign","setPath","addTableArray","data","genError","err","line","col","ex","column","fullPath","key","currentPath","context","reduceValueNode","pathAssigned","assignedPaths","valueAssignments","path","indexOf","reduceArrayWithTypeChecking","reduceInlineTableNode","values","obj","val","quotedPath","map","quoteDottedString","join","deepRef","filter","Array","newObj","start","keys","traversed","traversedPath","ctx","keysLen","String","array","firstType","str","peg$subclass","child","parent","ctor","constructor","prototype","SyntaxError","message","expected","found","offset","name","peg$computePosDetails","peg$reportedPos","pos","advance","details","startPos","endPos","ch","charAt","seenCR","peg$cachedPos","peg$cachedPosDetails","peg$fail","peg$currPos","peg$maxFailPos","peg$maxFailExpected","peg$buildException","cleanupExpected","sort","description","splice","buildMessage","stringEscape","hex","toUpperCase","expectedDesc","foundDesc","expectedDescs","posDetails","peg$parsestart","s0","s1","s2","cached","peg$cache","nextPos","result","peg$parseline","peg$FAILED","peg$c1","s3","s4","s5","s6","peg$parseS","peg$parseexpression","peg$parsecomment","peg$parseNL","peg$c2","peg$parseEOF","peg$parsepath","peg$parsetablearray","peg$parseassignment","peg$c3","peg$silentFails","peg$c4","peg$c5","peg$c6","peg$c7","peg$c8","peg$parsetable_key","peg$c9","peg$c10","peg$c11","s7","peg$c12","peg$parsedot_ended_table_key_part","peg$parsetable_key_part","peg$c13","peg$c14","peg$parsekey","peg$c15","peg$parsequoted_key","peg$c16","peg$c17","peg$c18","peg$c19","peg$parsevalue","peg$c20","peg$parseASCII_BASIC","peg$c21","peg$c22","peg$c23","peg$parseESCAPED","peg$c24","peg$parsestring","peg$parsedatetime","peg$parsefloat","peg$parseinteger","peg$parseboolean","peg$parsearray","peg$parseinline_table","substr","peg$c25","peg$c26","peg$c27","peg$parsemultiline_string_char","peg$c28","peg$parsestring_char","peg$c29","peg$c30","peg$parsemultiline_literal_char","peg$c31","peg$c32","peg$parseliteral_char","peg$c33","peg$c34","peg$parsemultiline_string_delim","peg$c35","peg$parseNLS","peg$c36","peg$parsefloat_text","peg$parseinteger_text","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$parseDIGITS","peg$c45","peg$c46","peg$c47","peg$c48","peg$c49","peg$parseDIGIT_OR_UNDER","peg$c50","peg$c51","peg$c52","peg$c53","peg$c54","peg$c55","peg$parsearray_sep","peg$c56","peg$parsearray_value","peg$c57","peg$parsearray_value_list","peg$c58","peg$c59","peg$c60","peg$c61","peg$c62","peg$c63","peg$c64","peg$parseinline_table_assignment","peg$c65","peg$c66","peg$c67","s8","s9","s10","peg$c68","peg$parsesecfragment","peg$c69","peg$parsedate","s11","peg$c70","peg$parsetime","peg$c71","peg$c72","peg$c73","peg$parsetime_with_offset","s12","s13","s14","s15","s16","peg$c74","peg$c75","peg$c76","peg$c77","peg$c78","peg$c79","peg$c80","test","peg$c81","peg$c82","peg$c83","peg$c84","peg$c85","peg$parseHEX","peg$c86","peg$c87","peg$c88","peg$c89","peg$c90","peg$c91","peg$c92","peg$c93","peg$c94","peg$c95","peg$c96","peg$c97","peg$c98","peg$c99","peg$c100","peg$c101","peg$c102","peg$c103","peg$c104","peg$c105","peg$c106","peg$c107","peg$c108","peg$c109","peg$c110","peg$c111","peg$c112","peg$c113","peg$c114","peg$c115","peg$c116","peg$parseESCAPED_UNICODE","peg$c117","peg$c118","peg$c119","peg$c120","peg$c121","addNode","convertCodePoint","num","isFinite","fromCodePoint","highSurrogate","lowSurrogate","MAX_SIZE","codeUnits","index","arguments","codePoint","Number","fromCharCode","apply","peg$result","options","peg$startRuleFunctions","peg$startRuleFunction","parts","concat","chars","char","left","right","parseFloat","text","digits","date","time","Date","startRule","isJump","isYes","_SLW","_Tile","_Level","_util","DEBUG","GRAVITY","Entity","game","_classCallCheck","sprite","sheet","Image","position","positionType","width","height","x","y","z","xv","yv","w","color","stop","undefined","round","sign","touchingWallRight","touchingWallLeft","_i","grounded","collides","ceil","_Tile2","default","size","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","tilesAbove","Symbol","iterator","next","done","tile","onAirPunch","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","pickTiles","_tile","onTouch","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","tilesBelow","_tile2","onStand","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","entityCollides","entity","canvas","getContext","CanvasRenderingContext2D","fillStyle","fillRect","top","_ref","_ref2","_slicedToArray","drawImage","shouldReturnTiles","tileLeft","tileRight","tileTop","tileBottom","bottom","tiles","collision","level","tileAt","solid","px","py","entities","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","by","some","solidTop","Player","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","src","spriteAnimation","dir","anim","oldAnim","nextFrame","state","jumpSound","window","Audio","errorSound","meta","special","includes","on","tileOn","lastOn","wantsInput","lv","id","levelid","levels","destroy","_Level2","tileset","create","tick","play","texPosition","_on$texPosition","log","mayJump","lastJump","now","_get","up","down","world","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","tilemap","row","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","Powerup","Goomba","_this2","_this3","Mushroom","_ref3","_len","args","_key","_this4","_toConsumableArray","Sign","_this5","Coin","_this6","coinSound","MUSIC_VOLUMES","airship","athletic","beach","castle","ice-cave","file-select","flower-gardens","grassland","jungle","kapper-valley","star-world","underwater-underworld","water","underground","Level","debug","leveldata","rows","split","tileid","get","exists","music","volume","loop","onCreate","pause","onUpdate","viewStartX","camera","viewStartY","viewEndX","viewEndY","_getAbsolutePosition","getAbsolutePosition","_getAbsolutePosition2","rendX","rendY","_tile$texPosition","tileX","tileY","dx","dy","newTile","_ref4","oldTile","onDestroy","_ref6","_ref5","_Text","_Entity","BG_COLORS","clouds","hills","BG_REPEATS","SLW","cursor","document","createElement","addEventListener","evt","keyCode","rect","getBoundingClientRect","clientX","clientY","setAttribute","player","background","minY","maxY","minX","maxX","wave","sin","lag","forEach","update","tx","ty","save","translate","ptrn","bg","createPattern","restore","draw","metaOf","_Text2","write","Text","TypeError","img","tint","set","A","B","C","D","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","j","k","q","?","!",".","'","(",")","#"," ","-","0","2","3","4","5","6","7","8","9","Tile","props","RangeError","Map","GroundTile","_inherits","_createClass","topTile","bottomTile","leftTile","rightTile","topLeftTile","topRightTile","bottomLeftTile","bottomRightTile","topLeft","topRight","bottomLeft","bottomRight","PipeTile","_Tile3","QBlockTile","usedBlock","replaceTile","_game$level$getAbsolu","_game$level$getAbsolu2","shroom","_Tile4","UsedBlockTile","snd","_Tile5","InvisibleBlockTile","_Tile6","DonutTile","fallVelocity","fallCountdown","falling","lastStoodOn","rnd","_Tile7","AirTile","foliage","what","_Tile8","CloudTile","_Tile9","CoinTile","_this9","coin","_game$level$getAbsolu3","_game$level$getAbsolu4","_Tile10","PlayerTile","_game$level$getAbsolu5","_game$level$getAbsolu6","_Tile11","SignTile","_game$level$getAbsolu7","_game$level$getAbsolu8","_Tile12","GoombaTile","goomba","_game$level$getAbsolu9","_game$level$getAbsolu10","_Tile13","DeathZoneTile","_Tile14","WorldWaterTile","_this14","_Tile15","WorldGroundTile","_this15","_Tile16","WorldPlayerTile","_game$level$getAbsolu11","_game$level$getAbsolu12","_Tile17","WorldFenceTile","_this17","_Tile18","WorldFlowerTile","_this18","_Tile19","WorldPipeTile","_Tile20","WorldHouseTile","_Tile21","WorldPathTile","_Tile22","WorldLevelTile","_this22","complete","_Tile23","WorldLevel1Tile","_Tile24","WorldLevel2Tile","_Tile25","WorldLevel3Tile","_Tile26","WorldLevel4Tile","_Tile27","WorldLevel5Tile","_Tile28","WorldLevel6Tile","_Tile29","WorldLevel7Tile","_Tile30","WorldLevel8Tile","onload","_SLW2","body","appendChild","focus","render","requestAnimationFrame","hasFocus","cameraUpdate","entityUpdate","canvasClear","colour","operation","alpha","globalCompositeOperation","globalAlpha","res","toDataURL","toml"],"mappings":"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","file":"index.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*!Please JS v0.4.2, Jordan Checkman 2014, Checkman.io, MIT License, Have fun.*/\n!function(e,r,a){\"function\"==typeof define&&define.amd?define([],a):\"object\"==typeof exports?module.exports=a():r[e]=a()}(\"Please\",this,function(){\"use strict\";function e(){function e(e,r,a){var o=Math.random;return a instanceof l&&(o=a.random),Math.floor(o()*(r-e+1))+e}function r(e,r,a){var o=Math.random;return a instanceof l&&(o=a.random),o()*(r-e)+e}function a(e,r,a){return Math.max(r,Math.min(e,a))}function o(e,r){var a;switch(e){case\"hex\":for(a=0;a<r.length;a++)r[a]=F.HSV_to_HEX(r[a]);break;case\"rgb\":for(a=0;a<r.length;a++)r[a]=F.HSV_to_RGB(r[a]);break;case\"rgb-string\":for(a=0;a<r.length;a++){var o=F.HSV_to_RGB(r[a]);r[a]=\"rgb(\"+o.r+\",\"+o.g+\",\"+o.b+\")\"}break;case\"hsv\":break;default:console.error(\"Format not recognized.\")}return r}function n(e){var r=F.HSV_to_RGB(e),a=(299*r.r+587*r.g+114*r.b)/1e3;return a>=128?\"dark\":\"light\"}function t(e){var r={};for(var a in e)e.hasOwnProperty(a)&&(r[a]=e[a]);return r}function l(e){function r(){o=(o+1)%256,n=(n+a[o])%256;var e=a[o];return a[o]=a[n],a[n]=e,a[(a[o]+a[n])%256]}for(var a=[],o=0,n=0,t=0;256>t;t++)a[t]=t;for(var l=0,F=0;256>l;l++){F=(F+a[l]+e.charCodeAt(l%e.length))%256;var s=a[l];a[l]=a[F],a[F]=s}this.random=function(){for(var e=0,a=0,o=1;8>e;e++)a+=r()*o,o*=256;return a/0x10000000000000000}}var F={},s={aliceblue:\"F0F8FF\",antiquewhite:\"FAEBD7\",aqua:\"00FFFF\",aquamarine:\"7FFFD4\",azure:\"F0FFFF\",beige:\"F5F5DC\",bisque:\"FFE4C4\",black:\"000000\",blanchedalmond:\"FFEBCD\",blue:\"0000FF\",blueviolet:\"8A2BE2\",brown:\"A52A2A\",burlywood:\"DEB887\",cadetblue:\"5F9EA0\",chartreuse:\"7FFF00\",chocolate:\"D2691E\",coral:\"FF7F50\",cornflowerblue:\"6495ED\",cornsilk:\"FFF8DC\",crimson:\"DC143C\",cyan:\"00FFFF\",darkblue:\"00008B\",darkcyan:\"008B8B\",darkgoldenrod:\"B8860B\",darkgray:\"A9A9A9\",darkgrey:\"A9A9A9\",darkgreen:\"006400\",darkkhaki:\"BDB76B\",darkmagenta:\"8B008B\",darkolivegreen:\"556B2F\",darkorange:\"FF8C00\",darkorchid:\"9932CC\",darkred:\"8B0000\",darksalmon:\"E9967A\",darkseagreen:\"8FBC8F\",darkslateblue:\"483D8B\",darkslategray:\"2F4F4F\",darkslategrey:\"2F4F4F\",darkturquoise:\"00CED1\",darkviolet:\"9400D3\",deeppink:\"FF1493\",deepskyblue:\"00BFFF\",dimgray:\"696969\",dimgrey:\"696969\",dodgerblue:\"1E90FF\",firebrick:\"B22222\",floralwhite:\"FFFAF0\",forestgreen:\"228B22\",fuchsia:\"FF00FF\",gainsboro:\"DCDCDC\",ghostwhite:\"F8F8FF\",gold:\"FFD700\",goldenrod:\"DAA520\",gray:\"808080\",grey:\"808080\",green:\"008000\",greenyellow:\"ADFF2F\",honeydew:\"F0FFF0\",hotpink:\"FF69B4\",indianred:\"CD5C5C\",indigo:\"4B0082\",ivory:\"FFFFF0\",khaki:\"F0E68C\",lavender:\"E6E6FA\",lavenderblush:\"FFF0F5\",lawngreen:\"7CFC00\",lemonchiffon:\"FFFACD\",lightblue:\"ADD8E6\",lightcoral:\"F08080\",lightcyan:\"E0FFFF\",lightgoldenrodyellow:\"FAFAD2\",lightgray:\"D3D3D3\",lightgrey:\"D3D3D3\",lightgreen:\"90EE90\",lightpink:\"FFB6C1\",lightsalmon:\"FFA07A\",lightseagreen:\"20B2AA\",lightskyblue:\"87CEFA\",lightslategray:\"778899\",lightslategrey:\"778899\",lightsteelblue:\"B0C4DE\",lightyellow:\"FFFFE0\",lime:\"00FF00\",limegreen:\"32CD32\",linen:\"FAF0E6\",magenta:\"FF00FF\",maroon:\"800000\",mediumaquamarine:\"66CDAA\",mediumblue:\"0000CD\",mediumorchid:\"BA55D3\",mediumpurple:\"9370D8\",mediumseagreen:\"3CB371\",mediumslateblue:\"7B68EE\",mediumspringgreen:\"00FA9A\",mediumturquoise:\"48D1CC\",mediumvioletred:\"C71585\",midnightblue:\"191970\",mintcream:\"F5FFFA\",mistyrose:\"FFE4E1\",moccasin:\"FFE4B5\",navajowhite:\"FFDEAD\",navy:\"000080\",oldlace:\"FDF5E6\",olive:\"808000\",olivedrab:\"6B8E23\",orange:\"FFA500\",orangered:\"FF4500\",orchid:\"DA70D6\",palegoldenrod:\"EEE8AA\",palegreen:\"98FB98\",paleturquoise:\"AFEEEE\",palevioletred:\"D87093\",papayawhip:\"FFEFD5\",peachpuff:\"FFDAB9\",peru:\"CD853F\",pink:\"FFC0CB\",plum:\"DDA0DD\",powderblue:\"B0E0E6\",purple:\"800080\",rebeccapurple:\"663399\",red:\"FF0000\",rosybrown:\"BC8F8F\",royalblue:\"4169E1\",saddlebrown:\"8B4513\",salmon:\"FA8072\",sandybrown:\"F4A460\",seagreen:\"2E8B57\",seashell:\"FFF5EE\",sienna:\"A0522D\",silver:\"C0C0C0\",skyblue:\"87CEEB\",slateblue:\"6A5ACD\",slategray:\"708090\",slategrey:\"708090\",snow:\"FFFAFA\",springgreen:\"00FF7F\",steelblue:\"4682B4\",tan:\"D2B48C\",teal:\"008080\",thistle:\"D8BFD8\",tomato:\"FF6347\",turquoise:\"40E0D0\",violet:\"EE82EE\",wheat:\"F5DEB3\",white:\"FFFFFF\",whitesmoke:\"F5F5F5\",yellow:\"FFFF00\",yellowgreen:\"9ACD32\"},i=.618033988749895,u={hue:null,saturation:null,value:null,base_color:\"\",greyscale:!1,grayscale:!1,golden:!0,full_random:!1,colors_returned:1,format:\"hex\",seed:null},c={scheme_type:\"analogous\",format:\"hex\"},h={golden:!1,format:\"hex\"};return F.NAME_to_HEX=function(e){return e=e.toLowerCase(),e in s?s[e]:(console.error(\"Color name not recognized.\"),void 0)},F.NAME_to_RGB=function(e){return F.HEX_to_RGB(F.NAME_to_HEX(e))},F.NAME_to_HSV=function(e){return F.HEX_to_HSV(F.NAME_to_HEX(e))},F.HEX_to_RGB=function(e){var r=/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;e=e.replace(r,function(e,r,a,o){return r+r+a+a+o+o});var a=/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(e);return a?{r:parseInt(a[1],16),g:parseInt(a[2],16),b:parseInt(a[3],16)}:null},F.RGB_to_HEX=function(e){return\"#\"+((1<<24)+(e.r<<16)+(e.g<<8)+e.b).toString(16).slice(1)},F.HSV_to_RGB=function(e){var r,a,o,n,t,l,F,s,i=e.h,u=e.s,c=e.v;if(0===u)return{r:c,g:c,b:c};switch(i/=60,n=Math.floor(i),t=i-n,l=c*(1-u),F=c*(1-u*t),s=c*(1-u*(1-t)),n){case 0:r=c,a=s,o=l;break;case 1:r=F,a=c,o=l;break;case 2:r=l,a=c,o=s;break;case 3:r=l,a=F,o=c;break;case 4:r=s,a=l,o=c;break;case 5:r=c,a=l,o=F}return{r:Math.floor(255*r),g:Math.floor(255*a),b:Math.floor(255*o)}},F.RGB_to_HSV=function(e){var r=e.r/255,a=e.g/255,o=e.b/255,n=0,t=0,l=0,F=Math.min(r,Math.min(a,o)),s=Math.max(r,Math.max(a,o));if(F===s)return l=F,{h:0,s:0,v:l};var i=r===F?a-o:o===F?r-a:o-r,u=r===F?3:o===F?1:5;return n=60*(u-i/(s-F)),t=(s-F)/s,l=s,{h:n,s:t,v:l}},F.HSV_to_HEX=function(e){return F.RGB_to_HEX(F.HSV_to_RGB(e))},F.HEX_to_HSV=function(e){return F.RGB_to_HSV(F.HEX_to_RGB(e))},F.make_scheme=function(e,r){function n(e){return{h:e.h,s:e.s,v:e.v}}var l,F,s,i,u,h=t(c);if(null!==r)for(var d in r)r.hasOwnProperty(d)&&(h[d]=r[d]);var g=[e];switch(h.scheme_type.toLowerCase()){case\"monochromatic\":case\"mono\":for(u=1;2>=u;u++)l=n(e),s=l.s+.1*u,s=a(s,0,1),i=l.v+.1*u,i=a(i,0,1),l.s=s,l.v=i,g.push(l);for(u=1;2>=u;u++)l=n(e),s=l.s-.1*u,s=a(s,0,1),i=l.v-.1*u,i=a(i,0,1),l.s=s,l.v=i,g.push(l);break;case\"complementary\":case\"complement\":case\"comp\":l=n(e),l.h=(l.h+180)%360,g.push(l);break;case\"split-complementary\":case\"split-complement\":case\"split\":l=n(e),l.h=(l.h+165)%360,g.push(l),l=n(e),l.h=Math.abs((l.h-165)%360),g.push(l);break;case\"double-complementary\":case\"double-complement\":case\"double\":l=n(e),l.h=(l.h+180)%360,g.push(l),l.h=(l.h+30)%360,F=n(l),g.push(l),l.h=(l.h+180)%360,g.push(F);break;case\"analogous\":case\"ana\":for(u=1;5>=u;u++)l=n(e),l.h=(l.h+20*u)%360,g.push(l);break;case\"triadic\":case\"triad\":case\"tri\":for(u=1;3>u;u++)l=n(e),l.h=(l.h+120*u)%360,g.push(l);break;default:console.error(\"Color scheme not recognized.\")}return o(h.format.toLowerCase(),g),g},F.make_color=function(n){var s=[],c=t(u),h=null;if(null!==n)for(var d in n)n.hasOwnProperty(d)&&(c[d]=n[d]);var g=null;\"string\"==typeof c.seed&&(g=new l(c.seed)),c.base_color.length>0&&(h=c.base_color.match(/^#?([0-9a-f]{3})([0-9a-f]{3})?$/i)?F.HEX_to_HSV(c.base_color):F.NAME_to_HSV(c.base_color));for(var m=0;m<c.colors_returned;m++){var f,E,b,p=e(0,360,g);null!==h?(f=a(e(h.h-5,h.h+5,g),0,360),E=0===h.s?0:r(.4,.85,g),b=r(.4,.85,g),s.push({h:f,s:E,v:b})):(f=c.greyscale===!0||c.grayscale===!0?0:c.golden===!0?(p+p/i)%360:null===c.hue||c.full_random===!0?p:a(c.hue,0,360),E=c.greyscale===!0||c.grayscale===!0?0:c.full_random===!0?r(0,1,g):null===c.saturation?.4:a(c.saturation,0,1),b=c.full_random===!0?r(0,1,g):c.greyscale===!0||c.grayscale===!0?r(.15,.75,g):null===c.value?.75:a(c.value,0,1),s.push({h:f,s:E,v:b}))}return o(c.format.toLowerCase(),s),s},F.make_contrast=function(e,r){var l=t(h);if(null!==r)for(var s in r)r.hasOwnProperty(s)&&(l[s]=r[s]);var u,c,d=n(e);if(l.golden===!0)c=e.h*(1+i)%360;else{var g=F.make_scheme(e,{scheme_type:\"complementary\",format:\"hsv\"})[1];c=a(g.h-30,0,360)}var m;return\"dark\"===d?m=a(e.v-.25,0,1):\"light\"===d&&(m=a(e.v+.25,0,1)),u=[{h:c,s:e.s,v:m}],o(l.format.toLowerCase(),u),u[0]},F}return e()});","var parser = require('./lib/parser');\nvar compiler = require('./lib/compiler');\n\nmodule.exports = {\n  parse: function(input) {\n    var nodes = parser.parse(input.toString());\n    return compiler.compile(nodes);\n  }\n};\n","function compile(nodes) {\n  \"use strict\";\n  var assignedPaths = [];\n  var valueAssignments = [];\n  var currentPath = \"\";\n  var data = {};\n  var context = data;\n  var arrayMode = false;\n\n  return reduce(nodes);\n\n  function reduce(nodes) {\n    var node;\n    for (var i in nodes) {\n      node = nodes[i];\n      switch (node.type) {\n      case \"Assign\":\n        assign(node);\n        break;\n      case \"ObjectPath\":\n        setPath(node);\n        break;\n      case \"ArrayPath\":\n        addTableArray(node);\n        break;\n      }\n    }\n\n    return data;\n  }\n\n  function genError(err, line, col) {\n    var ex = new Error(err);\n    ex.line = line;\n    ex.column = col;\n    throw ex;\n  }\n\n  function assign(node) {\n    var key = node.key;\n    var value = node.value;\n    var line = node.line;\n    var column = node.column;\n\n    var fullPath;\n    if (currentPath) {\n      fullPath = currentPath + \".\" + key;\n    } else {\n      fullPath = key;\n    }\n    if (typeof context[key] !== \"undefined\") {\n      genError(\"Cannot redefine existing key '\" + fullPath + \"'.\", line, column);\n    }\n\n    context[key] = reduceValueNode(value);\n\n    if (!pathAssigned(fullPath)) {\n      assignedPaths.push(fullPath);\n      valueAssignments.push(fullPath);\n    }\n  }\n\n\n  function pathAssigned(path) {\n    return assignedPaths.indexOf(path) !== -1;\n  }\n\n  function reduceValueNode(node) {\n    if (node.type === \"Array\") {\n      return reduceArrayWithTypeChecking(node.value);\n    } else if (node.type === \"InlineTable\") {\n      return reduceInlineTableNode(node.value);\n    } else {\n      return node.value;\n    }\n  }\n\n  function reduceInlineTableNode(values) {\n    var obj = {};\n    for (var i = 0; i < values.length; i++) {\n      var val = values[i];\n      if (val.value.type === \"InlineTable\") {\n        obj[val.key] = reduceInlineTableNode(val.value.value);\n      } else if (val.type === \"InlineTableValue\") {\n        obj[val.key] = reduceValueNode(val.value);\n      }\n    }\n\n    return obj;\n  }\n\n  function setPath(node) {\n    var path = node.value;\n    var quotedPath = path.map(quoteDottedString).join(\".\");\n    var line = node.line;\n    var column = node.column;\n\n    if (pathAssigned(quotedPath)) {\n      genError(\"Cannot redefine existing key '\" + path + \"'.\", line, column);\n    }\n    assignedPaths.push(quotedPath);\n    context = deepRef(data, path, {}, line, column);\n    currentPath = path;\n  }\n\n  function addTableArray(node) {\n    var path = node.value;\n    var quotedPath = path.map(quoteDottedString).join(\".\");\n    var line = node.line;\n    var column = node.column;\n\n    if (!pathAssigned(quotedPath)) {\n      assignedPaths.push(quotedPath);\n    }\n    assignedPaths = assignedPaths.filter(function(p) {\n      return p.indexOf(quotedPath) !== 0;\n    });\n    assignedPaths.push(quotedPath);\n    context = deepRef(data, path, [], line, column);\n    currentPath = quotedPath;\n\n    if (context instanceof Array) {\n      var newObj = {};\n      context.push(newObj);\n      context = newObj;\n    } else {\n      genError(\"Cannot redefine existing key '\" + path + \"'.\", line, column);\n    }\n  }\n\n  // Given a path 'a.b.c', create (as necessary) `start.a`,\n  // `start.a.b`, and `start.a.b.c`, assigning `value` to `start.a.b.c`.\n  // If `a` or `b` are arrays and have items in them, the last item in the\n  // array is used as the context for the next sub-path.\n  function deepRef(start, keys, value, line, column) {\n    var key;\n    var traversed = [];\n    var traversedPath = \"\";\n    var path = keys.join(\".\");\n    var ctx = start;\n    var keysLen = keys.length;\n\n    for (var i in keys) {\n      key = keys[i];\n      traversed.push(key);\n      traversedPath = traversed.join(\".\");\n      if (typeof ctx[key] === \"undefined\") {\n        if (i === String(keysLen - 1)) {\n          ctx[key] = value;\n        } else {\n          ctx[key] = {};\n        }\n      } else if (i !== keysLen - 1 && valueAssignments.indexOf(traversedPath) > -1) {\n        // already a non-object value at key, can't be used as part of a new path\n        genError(\"Cannot redefine existing key '\" + traversedPath + \"'.\", line, column);\n      }\n\n      ctx = ctx[key];\n      if (ctx instanceof Array && ctx.length && i < keys.length - 1) {\n        ctx = ctx[ctx.length - 1];\n      }\n    }\n\n    return ctx;\n  }\n\n  function reduceArrayWithTypeChecking(array) {\n    // Ensure that all items in the array are of the same type\n    var firstType = null;\n    for(var i in array) {\n      var node = array[i];\n      if (firstType === null) {\n        firstType = node.type;\n      } else {\n        if (node.type !== firstType) {\n          genError(\"Cannot add value of type \" + node.type + \" to array of type \" +\n            firstType + \".\", node.line, node.column);\n        }\n      }\n    }\n\n    // Recursively reduce array of nodes into array of the nodes' values\n    return array.map(reduceValueNode);\n  }\n\n  function quoteDottedString(str) {\n    if (str.indexOf(\".\") > -1) {\n      return \"\\\"\" + str + \"\\\"\";\n    } else {\n      return str;\n    }\n  }\n}\n\nmodule.exports = {\n  compile: compile\n};\n","module.exports = (function() {\n  /*\n   * Generated by PEG.js 0.8.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function SyntaxError(message, expected, found, offset, line, column) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.offset   = offset;\n    this.line     = line;\n    this.column   = column;\n\n    this.name     = \"SyntaxError\";\n  }\n\n  peg$subclass(SyntaxError, Error);\n\n  function parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = [],\n        peg$c1 = function() { return nodes },\n        peg$c2 = peg$FAILED,\n        peg$c3 = \"#\",\n        peg$c4 = { type: \"literal\", value: \"#\", description: \"\\\"#\\\"\" },\n        peg$c5 = void 0,\n        peg$c6 = { type: \"any\", description: \"any character\" },\n        peg$c7 = \"[\",\n        peg$c8 = { type: \"literal\", value: \"[\", description: \"\\\"[\\\"\" },\n        peg$c9 = \"]\",\n        peg$c10 = { type: \"literal\", value: \"]\", description: \"\\\"]\\\"\" },\n        peg$c11 = function(name) { addNode(node('ObjectPath', name, line, column)) },\n        peg$c12 = function(name) { addNode(node('ArrayPath', name, line, column)) },\n        peg$c13 = function(parts, name) { return parts.concat(name) },\n        peg$c14 = function(name) { return [name] },\n        peg$c15 = function(name) { return name },\n        peg$c16 = \".\",\n        peg$c17 = { type: \"literal\", value: \".\", description: \"\\\".\\\"\" },\n        peg$c18 = \"=\",\n        peg$c19 = { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n        peg$c20 = function(key, value) { addNode(node('Assign', value, line, column, key)) },\n        peg$c21 = function(chars) { return chars.join('') },\n        peg$c22 = \"\\\"\",\n        peg$c23 = { type: \"literal\", value: \"\\\"\", description: \"\\\"\\\\\\\"\\\"\" },\n        peg$c24 = function(char) { return char },\n        peg$c25 = \"\\\"\\\"\\\"\",\n        peg$c26 = { type: \"literal\", value: \"\\\"\\\"\\\"\", description: \"\\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\"\" },\n        peg$c27 = null,\n        peg$c28 = function(chars) { return node('String', chars.join(''), line, column) },\n        peg$c29 = \"'''\",\n        peg$c30 = { type: \"literal\", value: \"'''\", description: \"\\\"'''\\\"\" },\n        peg$c31 = \"'\",\n        peg$c32 = { type: \"literal\", value: \"'\", description: \"\\\"'\\\"\" },\n        peg$c33 = \"\\\\\",\n        peg$c34 = { type: \"literal\", value: \"\\\\\", description: \"\\\"\\\\\\\\\\\"\" },\n        peg$c35 = function(char) { return char},\n        peg$c36 = function() { return '' },\n        peg$c37 = \"e\",\n        peg$c38 = { type: \"literal\", value: \"e\", description: \"\\\"e\\\"\" },\n        peg$c39 = \"E\",\n        peg$c40 = { type: \"literal\", value: \"E\", description: \"\\\"E\\\"\" },\n        peg$c41 = function(left, right) { return node('Float', parseFloat(left + 'e' + right), line, column) },\n        peg$c42 = function(text) { return node('Float', parseFloat(text), line, column) },\n        peg$c43 = \"+\",\n        peg$c44 = { type: \"literal\", value: \"+\", description: \"\\\"+\\\"\" },\n        peg$c45 = function(digits) { return digits.join('') },\n        peg$c46 = \"-\",\n        peg$c47 = { type: \"literal\", value: \"-\", description: \"\\\"-\\\"\" },\n        peg$c48 = function(digits) { return '-' + digits.join('') },\n        peg$c49 = function(text) { return node('Integer', parseInt(text, 10), line, column) },\n        peg$c50 = \"true\",\n        peg$c51 = { type: \"literal\", value: \"true\", description: \"\\\"true\\\"\" },\n        peg$c52 = function() { return node('Boolean', true, line, column) },\n        peg$c53 = \"false\",\n        peg$c54 = { type: \"literal\", value: \"false\", description: \"\\\"false\\\"\" },\n        peg$c55 = function() { return node('Boolean', false, line, column) },\n        peg$c56 = function() { return node('Array', [], line, column) },\n        peg$c57 = function(value) { return node('Array', value ? [value] : [], line, column) },\n        peg$c58 = function(values) { return node('Array', values, line, column) },\n        peg$c59 = function(values, value) { return node('Array', values.concat(value), line, column) },\n        peg$c60 = function(value) { return value },\n        peg$c61 = \",\",\n        peg$c62 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c63 = \"{\",\n        peg$c64 = { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n        peg$c65 = \"}\",\n        peg$c66 = { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n        peg$c67 = function(values) { return node('InlineTable', values, line, column) },\n        peg$c68 = function(key, value) { return node('InlineTableValue', value, line, column, key) },\n        peg$c69 = function(digits) { return \".\" + digits },\n        peg$c70 = function(date) { return  date.join('') },\n        peg$c71 = \":\",\n        peg$c72 = { type: \"literal\", value: \":\", description: \"\\\":\\\"\" },\n        peg$c73 = function(time) { return time.join('') },\n        peg$c74 = \"T\",\n        peg$c75 = { type: \"literal\", value: \"T\", description: \"\\\"T\\\"\" },\n        peg$c76 = \"Z\",\n        peg$c77 = { type: \"literal\", value: \"Z\", description: \"\\\"Z\\\"\" },\n        peg$c78 = function(date, time) { return node('Date', new Date(date + \"T\" + time + \"Z\"), line, column) },\n        peg$c79 = function(date, time) { return node('Date', new Date(date + \"T\" + time), line, column) },\n        peg$c80 = /^[ \\t]/,\n        peg$c81 = { type: \"class\", value: \"[ \\\\t]\", description: \"[ \\\\t]\" },\n        peg$c82 = \"\\n\",\n        peg$c83 = { type: \"literal\", value: \"\\n\", description: \"\\\"\\\\n\\\"\" },\n        peg$c84 = \"\\r\",\n        peg$c85 = { type: \"literal\", value: \"\\r\", description: \"\\\"\\\\r\\\"\" },\n        peg$c86 = /^[0-9a-f]/i,\n        peg$c87 = { type: \"class\", value: \"[0-9a-f]i\", description: \"[0-9a-f]i\" },\n        peg$c88 = /^[0-9]/,\n        peg$c89 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c90 = \"_\",\n        peg$c91 = { type: \"literal\", value: \"_\", description: \"\\\"_\\\"\" },\n        peg$c92 = function() { return \"\" },\n        peg$c93 = /^[A-Za-z0-9_\\-]/,\n        peg$c94 = { type: \"class\", value: \"[A-Za-z0-9_\\\\-]\", description: \"[A-Za-z0-9_\\\\-]\" },\n        peg$c95 = function(d) { return d.join('') },\n        peg$c96 = \"\\\\\\\"\",\n        peg$c97 = { type: \"literal\", value: \"\\\\\\\"\", description: \"\\\"\\\\\\\\\\\\\\\"\\\"\" },\n        peg$c98 = function() { return '\"'  },\n        peg$c99 = \"\\\\\\\\\",\n        peg$c100 = { type: \"literal\", value: \"\\\\\\\\\", description: \"\\\"\\\\\\\\\\\\\\\\\\\"\" },\n        peg$c101 = function() { return '\\\\' },\n        peg$c102 = \"\\\\b\",\n        peg$c103 = { type: \"literal\", value: \"\\\\b\", description: \"\\\"\\\\\\\\b\\\"\" },\n        peg$c104 = function() { return '\\b' },\n        peg$c105 = \"\\\\t\",\n        peg$c106 = { type: \"literal\", value: \"\\\\t\", description: \"\\\"\\\\\\\\t\\\"\" },\n        peg$c107 = function() { return '\\t' },\n        peg$c108 = \"\\\\n\",\n        peg$c109 = { type: \"literal\", value: \"\\\\n\", description: \"\\\"\\\\\\\\n\\\"\" },\n        peg$c110 = function() { return '\\n' },\n        peg$c111 = \"\\\\f\",\n        peg$c112 = { type: \"literal\", value: \"\\\\f\", description: \"\\\"\\\\\\\\f\\\"\" },\n        peg$c113 = function() { return '\\f' },\n        peg$c114 = \"\\\\r\",\n        peg$c115 = { type: \"literal\", value: \"\\\\r\", description: \"\\\"\\\\\\\\r\\\"\" },\n        peg$c116 = function() { return '\\r' },\n        peg$c117 = \"\\\\U\",\n        peg$c118 = { type: \"literal\", value: \"\\\\U\", description: \"\\\"\\\\\\\\U\\\"\" },\n        peg$c119 = function(digits) { return convertCodePoint(digits.join('')) },\n        peg$c120 = \"\\\\u\",\n        peg$c121 = { type: \"literal\", value: \"\\\\u\", description: \"\\\"\\\\\\\\u\\\"\" },\n\n        peg$currPos          = 0,\n        peg$reportedPos      = 0,\n        peg$cachedPos        = 0,\n        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$cache = {},\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$reportedPos, peg$currPos);\n    }\n\n    function offset() {\n      return peg$reportedPos;\n    }\n\n    function line() {\n      return peg$computePosDetails(peg$reportedPos).line;\n    }\n\n    function column() {\n      return peg$computePosDetails(peg$reportedPos).column;\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        peg$reportedPos\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, peg$reportedPos);\n    }\n\n    function peg$computePosDetails(pos) {\n      function advance(details, startPos, endPos) {\n        var p, ch;\n\n        for (p = startPos; p < endPos; p++) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n        }\n      }\n\n      if (peg$cachedPos !== pos) {\n        if (peg$cachedPos > pos) {\n          peg$cachedPos = 0;\n          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };\n        }\n        advance(peg$cachedPosDetails, peg$cachedPos, pos);\n        peg$cachedPos = pos;\n      }\n\n      return peg$cachedPosDetails;\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, pos) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0180-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1080-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      var posDetails = peg$computePosDetails(pos),\n          found      = pos < input.length ? input.charAt(pos) : null;\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        pos,\n        posDetails.line,\n        posDetails.column\n      );\n    }\n\n    function peg$parsestart() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 45 + 0,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseline();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseline();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c1();\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseline() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 45 + 1,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseS();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseS();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseexpression();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseS();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseS();\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parsecomment();\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parsecomment();\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseNL();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseNL();\n                }\n              } else {\n                s5 = peg$c2;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseEOF();\n              }\n              if (s5 !== peg$FAILED) {\n                s1 = [s1, s2, s3, s4, s5];\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseS();\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            s2 = peg$parseS();\n          }\n        } else {\n          s1 = peg$c2;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseNL();\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parseNL();\n            }\n          } else {\n            s2 = peg$c2;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = peg$parseEOF();\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseNL();\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseexpression() {\n      var s0;\n\n      var key    = peg$currPos * 45 + 2,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsecomment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepath();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsetablearray();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseassignment();\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsecomment() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 45 + 3,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 35) {\n        s1 = peg$c3;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c4); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseNL();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseEOF();\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = peg$c5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$c2;\n        }\n        if (s4 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c6); }\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c2;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c2;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$currPos;\n          peg$silentFails++;\n          s5 = peg$parseNL();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseEOF();\n          }\n          peg$silentFails--;\n          if (s5 === peg$FAILED) {\n            s4 = peg$c5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$c2;\n          }\n          if (s4 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c2;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c2;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsepath() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 45 + 4,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c7;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseS();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseS();\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_key();\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parseS();\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parseS();\n            }\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s5 = peg$c9;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c11(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsetablearray() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      var key    = peg$currPos * 45 + 5,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c7;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 91) {\n          s2 = peg$c7;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseS();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseS();\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsetable_key();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseS();\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parseS();\n              }\n              if (s5 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 93) {\n                  s6 = peg$c9;\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                }\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 93) {\n                    s7 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c12(s4);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c2;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsetable_key() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 45 + 6,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsedot_ended_table_key_part();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsedot_ended_table_key_part();\n        }\n      } else {\n        s1 = peg$c2;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_key_part();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c13(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsetable_key_part();\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c14(s1);\n        }\n        s0 = s1;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsetable_key_part() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 45 + 7,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseS();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseS();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsekey();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseS();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseS();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c15(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseS();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseS();\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsequoted_key();\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parseS();\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseS();\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c15(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsedot_ended_table_key_part() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 45 + 8,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseS();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseS();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsekey();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseS();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseS();\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 46) {\n              s4 = peg$c16;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c17); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseS();\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parseS();\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c15(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseS();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseS();\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsequoted_key();\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parseS();\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseS();\n            }\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 46) {\n                s4 = peg$c16;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c17); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = [];\n                s6 = peg$parseS();\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseS();\n                }\n                if (s5 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c15(s2);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c2;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseassignment() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 45 + 9,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsekey();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseS();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseS();\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 61) {\n            s3 = peg$c18;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parseS();\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parseS();\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsevalue();\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c20(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsequoted_key();\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseS();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseS();\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s3 = peg$c18;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = [];\n              s5 = peg$parseS();\n              while (s5 !== peg$FAILED) {\n                s4.push(s5);\n                s5 = peg$parseS();\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsevalue();\n                if (s5 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c20(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c2;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsekey() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 45 + 10,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseASCII_BASIC();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseASCII_BASIC();\n        }\n      } else {\n        s1 = peg$c2;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c21(s1);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsequoted_key() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 45 + 11,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 34) {\n        s1 = peg$c22;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseNL();\n        if (s5 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 91) {\n            s5 = peg$c7;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s5 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s5 = peg$c9;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c10); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c18;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 34) {\n                  s5 = peg$c22;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c23); }\n                }\n              }\n            }\n          }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = peg$c5;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$c2;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseESCAPED();\n          if (s5 === peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            peg$reportedPos = s3;\n            s4 = peg$c24(s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c2;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$c2;\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$currPos;\n            s4 = peg$currPos;\n            peg$silentFails++;\n            s5 = peg$parseNL();\n            if (s5 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 91) {\n                s5 = peg$c7;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c8); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 93) {\n                  s5 = peg$c9;\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 61) {\n                    s5 = peg$c18;\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c19); }\n                  }\n                  if (s5 === peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 34) {\n                      s5 = peg$c22;\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c23); }\n                    }\n                  }\n                }\n              }\n            }\n            peg$silentFails--;\n            if (s5 === peg$FAILED) {\n              s4 = peg$c5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$c2;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseESCAPED();\n              if (s5 === peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s5 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c6); }\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s3;\n                s4 = peg$c24(s5);\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$c2;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c2;\n            }\n          }\n        } else {\n          s2 = peg$c2;\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s3 = peg$c22;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c23); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c21(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsevalue() {\n      var s0;\n\n      var key    = peg$currPos * 45 + 12,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parsestring();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsedatetime();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefloat();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseinteger();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseboolean();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsearray();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseinline_table();\n                }\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsestring() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 45 + 13,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 3) === peg$c25) {\n        s1 = peg$c25;\n        peg$currPos += 3;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c26); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseNL();\n        if (s2 === peg$FAILED) {\n          s2 = peg$c27;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsemultiline_string_char();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsemultiline_string_char();\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3) === peg$c25) {\n              s4 = peg$c25;\n              peg$currPos += 3;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c26); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c28(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s1 = peg$c22;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parsestring_char();\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parsestring_char();\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 34) {\n              s3 = peg$c22;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c23); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c28(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 3) === peg$c29) {\n            s1 = peg$c29;\n            peg$currPos += 3;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c30); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseNL();\n            if (s2 === peg$FAILED) {\n              s2 = peg$c27;\n            }\n            if (s2 !== peg$FAILED) {\n              s3 = [];\n              s4 = peg$parsemultiline_literal_char();\n              while (s4 !== peg$FAILED) {\n                s3.push(s4);\n                s4 = peg$parsemultiline_literal_char();\n              }\n              if (s3 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3) === peg$c29) {\n                  s4 = peg$c29;\n                  peg$currPos += 3;\n                } else {\n                  s4 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c30); }\n                }\n                if (s4 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c28(s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c2;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s1 = peg$c31;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c32); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = [];\n              s3 = peg$parseliteral_char();\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parseliteral_char();\n              }\n              if (s2 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 39) {\n                  s3 = peg$c31;\n                  peg$currPos++;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c32); }\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c28(s2);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c2;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsestring_char() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 45 + 14,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseESCAPED();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        peg$silentFails++;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s2 = peg$c22;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        peg$silentFails--;\n        if (s2 === peg$FAILED) {\n          s1 = peg$c5;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c2;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          peg$silentFails++;\n          if (input.charCodeAt(peg$currPos) === 92) {\n            s3 = peg$c33;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n          peg$silentFails--;\n          if (s3 === peg$FAILED) {\n            s2 = peg$c5;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c2;\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c24(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseliteral_char() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 45 + 15,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s2 = peg$c31;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c5;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c2;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c24(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsemultiline_string_char() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 45 + 16,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseESCAPED();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsemultiline_string_delim();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          peg$silentFails++;\n          if (input.substr(peg$currPos, 3) === peg$c25) {\n            s2 = peg$c25;\n            peg$currPos += 3;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c26); }\n          }\n          peg$silentFails--;\n          if (s2 === peg$FAILED) {\n            s1 = peg$c5;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c2;\n          }\n          if (s1 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n            if (s2 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c35(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsemultiline_string_delim() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 45 + 17,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 92) {\n        s1 = peg$c33;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseNL();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseNLS();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseNLS();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c36();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsemultiline_literal_char() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 45 + 18,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 3) === peg$c29) {\n        s2 = peg$c29;\n        peg$currPos += 3;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c30); }\n      }\n      peg$silentFails--;\n      if (s2 === peg$FAILED) {\n        s1 = peg$c5;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c2;\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c24(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsefloat() {\n      var s0, s1, s2, s3;\n\n      var key    = peg$currPos * 45 + 19,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsefloat_text();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseinteger_text();\n      }\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 101) {\n          s2 = peg$c37;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c38); }\n        }\n        if (s2 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 69) {\n            s2 = peg$c39;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c40); }\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseinteger_text();\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c41(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsefloat_text();\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c42(s1);\n        }\n        s0 = s1;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsefloat_text() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 45 + 20,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c44); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c27;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parseDIGITS();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s4 = peg$c16;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c17); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseDIGITS();\n            if (s5 !== peg$FAILED) {\n              s3 = [s3, s4, s5];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c2;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c2;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c2;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c45(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c46;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c47); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parseDIGITS();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 46) {\n              s4 = peg$c16;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c17); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseDIGITS();\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c2;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c2;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c2;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c48(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseinteger() {\n      var s0, s1;\n\n      var key    = peg$currPos * 45 + 21,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parseinteger_text();\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c49(s1);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseinteger_text() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 45 + 22,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 43) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c44); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$c27;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseDIGIT_OR_UNDER();\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            s3 = peg$parseDIGIT_OR_UNDER();\n          }\n        } else {\n          s2 = peg$c2;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          if (input.charCodeAt(peg$currPos) === 46) {\n            s4 = peg$c16;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c17); }\n          }\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = peg$c5;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$c2;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c45(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c46;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c47); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = [];\n          s3 = peg$parseDIGIT_OR_UNDER();\n          if (s3 !== peg$FAILED) {\n            while (s3 !== peg$FAILED) {\n              s2.push(s3);\n              s3 = peg$parseDIGIT_OR_UNDER();\n            }\n          } else {\n            s2 = peg$c2;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 46) {\n              s4 = peg$c16;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c17); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = peg$c5;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$c2;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c48(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseboolean() {\n      var s0, s1;\n\n      var key    = peg$currPos * 45 + 23,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4) === peg$c50) {\n        s1 = peg$c50;\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c51); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c52();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 5) === peg$c53) {\n          s1 = peg$c53;\n          peg$currPos += 5;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c54); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c55();\n        }\n        s0 = s1;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsearray() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 45 + 24,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s1 = peg$c7;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsearray_sep();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsearray_sep();\n        }\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s3 = peg$c9;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c10); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c56();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 91) {\n          s1 = peg$c7;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c8); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsearray_value();\n          if (s2 === peg$FAILED) {\n            s2 = peg$c27;\n          }\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 93) {\n              s3 = peg$c9;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c10); }\n            }\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c57(s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 91) {\n            s1 = peg$c7;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = [];\n            s3 = peg$parsearray_value_list();\n            if (s3 !== peg$FAILED) {\n              while (s3 !== peg$FAILED) {\n                s2.push(s3);\n                s3 = peg$parsearray_value_list();\n              }\n            } else {\n              s2 = peg$c2;\n            }\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 93) {\n                s3 = peg$c9;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c10); }\n              }\n              if (s3 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c58(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.charCodeAt(peg$currPos) === 91) {\n              s1 = peg$c7;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c8); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = [];\n              s3 = peg$parsearray_value_list();\n              if (s3 !== peg$FAILED) {\n                while (s3 !== peg$FAILED) {\n                  s2.push(s3);\n                  s3 = peg$parsearray_value_list();\n                }\n              } else {\n                s2 = peg$c2;\n              }\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parsearray_value();\n                if (s3 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 93) {\n                    s4 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s4 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s4 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c59(s2, s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c2;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsearray_value() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 45 + 25,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsearray_sep();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsearray_sep();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsevalue();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsearray_sep();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsearray_sep();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c60(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsearray_value_list() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      var key    = peg$currPos * 45 + 26,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsearray_sep();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsearray_sep();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsevalue();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsearray_sep();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsearray_sep();\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 44) {\n              s4 = peg$c61;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c62); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsearray_sep();\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parsearray_sep();\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c60(s2);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsearray_sep() {\n      var s0;\n\n      var key    = peg$currPos * 45 + 27,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseS();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseNL();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecomment();\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseinline_table() {\n      var s0, s1, s2, s3, s4, s5;\n\n      var key    = peg$currPos * 45 + 28,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c63;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c64); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parseS();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parseS();\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseinline_table_assignment();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseinline_table_assignment();\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = [];\n            s5 = peg$parseS();\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$parseS();\n            }\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 125) {\n                s5 = peg$c65;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c66); }\n              }\n              if (s5 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c67(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseinline_table_assignment() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      var key    = peg$currPos * 45 + 29,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseS();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseS();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsekey();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseS();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parseS();\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c18;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseS();\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$parseS();\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsevalue();\n                if (s6 !== peg$FAILED) {\n                  s7 = [];\n                  s8 = peg$parseS();\n                  while (s8 !== peg$FAILED) {\n                    s7.push(s8);\n                    s8 = peg$parseS();\n                  }\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 44) {\n                      s8 = peg$c61;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c62); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      s9 = [];\n                      s10 = peg$parseS();\n                      while (s10 !== peg$FAILED) {\n                        s9.push(s10);\n                        s10 = peg$parseS();\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$reportedPos = s0;\n                        s1 = peg$c68(s2, s6);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$c2;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$c2;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c2;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        s2 = peg$parseS();\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseS();\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsekey();\n          if (s2 !== peg$FAILED) {\n            s3 = [];\n            s4 = peg$parseS();\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseS();\n            }\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s4 = peg$c18;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = [];\n                s6 = peg$parseS();\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseS();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parsevalue();\n                  if (s6 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c68(s2, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$c2;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$c2;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$c2;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsesecfragment() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 45 + 30,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s1 = peg$c16;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c17); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseDIGITS();\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c69(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsedate() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n      var key    = peg$currPos * 45 + 31,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseDIGIT_OR_UNDER();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDIGIT_OR_UNDER();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDIGIT_OR_UNDER();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseDIGIT_OR_UNDER();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 45) {\n                s6 = peg$c46;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c47); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseDIGIT_OR_UNDER();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseDIGIT_OR_UNDER();\n                  if (s8 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 45) {\n                      s9 = peg$c46;\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c47); }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseDIGIT_OR_UNDER();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseDIGIT_OR_UNDER();\n                        if (s11 !== peg$FAILED) {\n                          s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];\n                          s1 = s2;\n                        } else {\n                          peg$currPos = s1;\n                          s1 = peg$c2;\n                        }\n                      } else {\n                        peg$currPos = s1;\n                        s1 = peg$c2;\n                      }\n                    } else {\n                      peg$currPos = s1;\n                      s1 = peg$c2;\n                    }\n                  } else {\n                    peg$currPos = s1;\n                    s1 = peg$c2;\n                  }\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$c2;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$c2;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$c2;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c2;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c2;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c2;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c70(s1);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsetime() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      var key    = peg$currPos * 45 + 32,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseDIGIT_OR_UNDER();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDIGIT_OR_UNDER();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s4 = peg$c71;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c72); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseDIGIT_OR_UNDER();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseDIGIT_OR_UNDER();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 58) {\n                  s7 = peg$c71;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseDIGIT_OR_UNDER();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseDIGIT_OR_UNDER();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsesecfragment();\n                      if (s10 === peg$FAILED) {\n                        s10 = peg$c27;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10];\n                        s1 = s2;\n                      } else {\n                        peg$currPos = s1;\n                        s1 = peg$c2;\n                      }\n                    } else {\n                      peg$currPos = s1;\n                      s1 = peg$c2;\n                    }\n                  } else {\n                    peg$currPos = s1;\n                    s1 = peg$c2;\n                  }\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$c2;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$c2;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$c2;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c2;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c2;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c2;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c73(s1);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsetime_with_offset() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16;\n\n      var key    = peg$currPos * 45 + 33,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseDIGIT_OR_UNDER();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDIGIT_OR_UNDER();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 58) {\n            s4 = peg$c71;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c72); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseDIGIT_OR_UNDER();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseDIGIT_OR_UNDER();\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 58) {\n                  s7 = peg$c71;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseDIGIT_OR_UNDER();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseDIGIT_OR_UNDER();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsesecfragment();\n                      if (s10 === peg$FAILED) {\n                        s10 = peg$c27;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        if (input.charCodeAt(peg$currPos) === 45) {\n                          s11 = peg$c46;\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c47); }\n                        }\n                        if (s11 === peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 43) {\n                            s11 = peg$c43;\n                            peg$currPos++;\n                          } else {\n                            s11 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c44); }\n                          }\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseDIGIT_OR_UNDER();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseDIGIT_OR_UNDER();\n                            if (s13 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 58) {\n                                s14 = peg$c71;\n                                peg$currPos++;\n                              } else {\n                                s14 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c72); }\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseDIGIT_OR_UNDER();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parseDIGIT_OR_UNDER();\n                                  if (s16 !== peg$FAILED) {\n                                    s2 = [s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16];\n                                    s1 = s2;\n                                  } else {\n                                    peg$currPos = s1;\n                                    s1 = peg$c2;\n                                  }\n                                } else {\n                                  peg$currPos = s1;\n                                  s1 = peg$c2;\n                                }\n                              } else {\n                                peg$currPos = s1;\n                                s1 = peg$c2;\n                              }\n                            } else {\n                              peg$currPos = s1;\n                              s1 = peg$c2;\n                            }\n                          } else {\n                            peg$currPos = s1;\n                            s1 = peg$c2;\n                          }\n                        } else {\n                          peg$currPos = s1;\n                          s1 = peg$c2;\n                        }\n                      } else {\n                        peg$currPos = s1;\n                        s1 = peg$c2;\n                      }\n                    } else {\n                      peg$currPos = s1;\n                      s1 = peg$c2;\n                    }\n                  } else {\n                    peg$currPos = s1;\n                    s1 = peg$c2;\n                  }\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$c2;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$c2;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$c2;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$c2;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$c2;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$c2;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c73(s1);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parsedatetime() {\n      var s0, s1, s2, s3, s4;\n\n      var key    = peg$currPos * 45 + 34,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = peg$parsedate();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 84) {\n          s2 = peg$c74;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c75); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetime();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 90) {\n              s4 = peg$c76;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c77); }\n            }\n            if (s4 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c78(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsedate();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 84) {\n            s2 = peg$c74;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c75); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsetime_with_offset();\n            if (s3 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c79(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$c2;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseS() {\n      var s0;\n\n      var key    = peg$currPos * 45 + 35,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c80.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c81); }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseNL() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 45 + 36,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (input.charCodeAt(peg$currPos) === 10) {\n        s0 = peg$c82;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c83); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 13) {\n          s1 = peg$c84;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c85); }\n        }\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 10) {\n            s2 = peg$c82;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c83); }\n          }\n          if (s2 !== peg$FAILED) {\n            s1 = [s1, s2];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseNLS() {\n      var s0;\n\n      var key    = peg$currPos * 45 + 37,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$parseNL();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseS();\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseEOF() {\n      var s0, s1;\n\n      var key    = peg$currPos * 45 + 38,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      peg$silentFails++;\n      if (input.length > peg$currPos) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      peg$silentFails--;\n      if (s1 === peg$FAILED) {\n        s0 = peg$c5;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseHEX() {\n      var s0;\n\n      var key    = peg$currPos * 45 + 39,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c86.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c87); }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseDIGIT_OR_UNDER() {\n      var s0, s1;\n\n      var key    = peg$currPos * 45 + 40,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c88.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c89); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 95) {\n          s1 = peg$c90;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c91); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c92();\n        }\n        s0 = s1;\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseASCII_BASIC() {\n      var s0;\n\n      var key    = peg$currPos * 45 + 41,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      if (peg$c93.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c94); }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseDIGITS() {\n      var s0, s1, s2;\n\n      var key    = peg$currPos * 45 + 42,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parseDIGIT_OR_UNDER();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parseDIGIT_OR_UNDER();\n        }\n      } else {\n        s1 = peg$c2;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c95(s1);\n      }\n      s0 = s1;\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseESCAPED() {\n      var s0, s1;\n\n      var key    = peg$currPos * 45 + 43,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c96) {\n        s1 = peg$c96;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c97); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$reportedPos = s0;\n        s1 = peg$c98();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c99) {\n          s1 = peg$c99;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c100); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c101();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c102) {\n            s1 = peg$c102;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c103); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c104();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c105) {\n              s1 = peg$c105;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c106); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$reportedPos = s0;\n              s1 = peg$c107();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c108) {\n                s1 = peg$c108;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c109); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$reportedPos = s0;\n                s1 = peg$c110();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c111) {\n                  s1 = peg$c111;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c112); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$reportedPos = s0;\n                  s1 = peg$c113();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c114) {\n                    s1 = peg$c114;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c115); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$reportedPos = s0;\n                    s1 = peg$c116();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseESCAPED_UNICODE();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n    function peg$parseESCAPED_UNICODE() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n      var key    = peg$currPos * 45 + 44,\n          cached = peg$cache[key];\n\n      if (cached) {\n        peg$currPos = cached.nextPos;\n        return cached.result;\n      }\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c117) {\n        s1 = peg$c117;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c118); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parseHEX();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseHEX();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseHEX();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseHEX();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseHEX();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseHEX();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseHEX();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseHEX();\n                      if (s10 !== peg$FAILED) {\n                        s3 = [s3, s4, s5, s6, s7, s8, s9, s10];\n                        s2 = s3;\n                      } else {\n                        peg$currPos = s2;\n                        s2 = peg$c2;\n                      }\n                    } else {\n                      peg$currPos = s2;\n                      s2 = peg$c2;\n                    }\n                  } else {\n                    peg$currPos = s2;\n                    s2 = peg$c2;\n                  }\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$c2;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c2;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c2;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c2;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$c2;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$reportedPos = s0;\n          s1 = peg$c119(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$c2;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c120) {\n          s1 = peg$c120;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c121); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parseHEX();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseHEX();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseHEX();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseHEX();\n                if (s6 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$c2;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$c2;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$c2;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$c2;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$reportedPos = s0;\n            s1 = peg$c119(s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$c2;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$c2;\n        }\n      }\n\n      peg$cache[key] = { nextPos: peg$currPos, result: s0 };\n\n      return s0;\n    }\n\n\n      var nodes = [];\n\n      function genError(err, line, col) {\n        var ex = new Error(err);\n        ex.line = line;\n        ex.column = col;\n        throw ex;\n      }\n\n      function addNode(node) {\n        nodes.push(node);\n      }\n\n      function node(type, value, line, column, key) {\n        var obj = { type: type, value: value, line: line(), column: column() };\n        if (key) obj.key = key;\n        return obj;\n      }\n\n      function convertCodePoint(str, line, col) {\n        var num = parseInt(\"0x\" + str);\n\n        if (\n          !isFinite(num) ||\n          Math.floor(num) != num ||\n          num < 0 ||\n          num > 0x10FFFF ||\n          (num > 0xD7FF && num < 0xE000)\n        ) {\n          genError(\"Invalid Unicode escape code: \" + str, line, col);\n        } else {\n          return fromCodePoint(num);\n        }\n      }\n\n      function fromCodePoint() {\n        var MAX_SIZE = 0x4000;\n        var codeUnits = [];\n        var highSurrogate;\n        var lowSurrogate;\n        var index = -1;\n        var length = arguments.length;\n        if (!length) {\n          return '';\n        }\n        var result = '';\n        while (++index < length) {\n          var codePoint = Number(arguments[index]);\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint);\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000;\n            highSurrogate = (codePoint >> 10) + 0xD800;\n            lowSurrogate = (codePoint % 0x400) + 0xDC00;\n            codeUnits.push(highSurrogate, lowSurrogate);\n          }\n          if (index + 1 == length || codeUnits.length > MAX_SIZE) {\n            result += String.fromCharCode.apply(null, codeUnits);\n            codeUnits.length = 0;\n          }\n        }\n        return result;\n      }\n\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);\n    }\n  }\n\n  return {\n    SyntaxError: SyntaxError,\n    parse:       parse\n  };\n})();\n","// @flow\r\n\r\nconst DEBUG = false // show bounding boxes\r\nconst GRAVITY = 0.25\r\n\r\nimport SLW from './SLW'\r\nimport Tile from './Tile'\r\nimport Level from './Level'\r\n\r\nimport { sign, levels } from './util'\r\n\r\ntype Position = [number, number]\r\n\r\n// is [z], [space], or [up arrow] down?\r\nfunction isJump(keys): boolean {\r\n  return keys[32] || keys[38] || keys[90]\r\n}\r\n\r\n// is [z], [space], or [enter] down?\r\nfunction isYes(keys): boolean {\r\n  return keys[32] || keys[13] || keys[90]\r\n}\r\n\r\nexport class Entity {\r\n  game: SLW\r\n\r\n  // Position, absolute (not tileX/Y!)\r\n  x: number\r\n  y: number\r\n\r\n  // order in which entity is rendered\r\n  z: number\r\n\r\n  // Velocity\r\n  xv: number\r\n  yv: number\r\n\r\n  // Dimensions (used for bounding box)\r\n  w: number // width\r\n  h: number // height\r\n\r\n  color: string // \"rgba(r, g, b, a)\"\r\n  sprite: {\r\n    sheet: Image,\r\n    position: Position,\r\n    positionType: ?string,\r\n    width: number,\r\n    height: number\r\n  }\r\n\r\n  get top(): number {\r\n    return Math.floor(this.y)\r\n  }\r\n\r\n  get bottom(): number {\r\n    return Math.floor(this.y + this.h)\r\n  }\r\n\r\n  get left(): number {\r\n    return Math.floor(this.x)\r\n  }\r\n\r\n  get right(): number {\r\n    return Math.floor(this.x + this.w)\r\n  }\r\n\r\n  constructor(game: SLW) {\r\n    this.game = game\r\n\r\n    this.sprite = {\r\n      sheet: new Image(),\r\n      position: [0, 0],\r\n      positionType: '',\r\n      width: 0,\r\n      height: 0\r\n    }\r\n\r\n    this.x = 0\r\n    this.y = 0\r\n    this.z = 0\r\n\r\n    this.xv = 0\r\n    this.yv = 0\r\n\r\n    this.w = 16\r\n    this.h = 16\r\n\r\n    // pleasing color for debugging reasons :P\r\n    const c = require('pleasejs').make_color({ format: 'rgb' })[0]\r\n    this.color = `rgba(${c.r}, ${c.g}, ${c.b}, 0.75)`\r\n  }\r\n\r\n  update(stop: boolean = true) {\r\n    let v: number = 0\r\n\r\n    // x:\r\n    const xv = Math.round(this.xv)\r\n    v = sign(xv)\r\n\r\n    for (let i = 0; i < Math.abs(xv); i++) {\r\n      this.x += v\r\n      if (this.touchingWallRight || this.touchingWallLeft) {\r\n        this.x -= v\r\n        if (stop) this.xv = 0\r\n      }\r\n    }\r\n\r\n    // y:\r\n    const yv = Math.floor(this.yv)\r\n    v = sign(yv)\r\n\r\n    for (let i = 0; i < Math.abs(yv); i++) {\r\n      this.y += v\r\n\r\n      // Checking if grounded should only happen if the entity is going down\r\n      // (that way it can jump through solidTop blocks)\r\n      if ((v === 1 && this.grounded) || this.collides()) {\r\n        this.y -= v\r\n        if (stop) this.yv = 0\r\n\r\n        this.y = Math.ceil(this.y / Tile.size) * Tile.size\r\n\r\n        // Air punch should only happen when the entity jumps.\r\n        if (v === -1) {\r\n          for (let tile of this.tilesAbove) {\r\n            tile.onAirPunch(this)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let tile of this.pickTiles(0, 0, 0, 1)) {\r\n      tile.onTouch(this)\r\n    }\r\n\r\n    for (let tile of this.tilesBelow) {\r\n      tile.onStand(this)\r\n    }\r\n\r\n    for (let entity of this.entityCollides()) {\r\n      entity.onTouch(this)\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    const ctx = this.game.canvas.getContext('2d')\r\n    if (!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n    if (DEBUG) {\r\n      // Draw the bounding box (if in DEBUG mode).\r\n      ctx.fillStyle = this.color\r\n      ctx.fillRect(this.left, this.top, this.w + 1, this.h + 1)\r\n    }\r\n\r\n    // Draw the sprite image (if there is one).\r\n    const sprite = this.sprite\r\n\r\n    if (sprite) {\r\n      let [x, y] = sprite.position || [0, 0]\r\n      let w = sprite.width || this.w\r\n      let h = sprite.height || this.h\r\n\r\n      if (sprite.positionType !== 'absolute') {\r\n        x *= w\r\n        y *= h\r\n      }\r\n\r\n      ctx.drawImage(\r\n        this.sprite.sheet,\r\n\r\n        // Area on sheet to grab\r\n        x, y, w, h,\r\n\r\n        // Area on screen to draw\r\n        this.left, this.top, w, h\r\n      )\r\n    }\r\n  }\r\n\r\n  // Are we currently intersecting any solid Tiles?\r\n  collides(shouldReturnTiles: boolean = false): any {\r\n    let tileLeft   = Math.floor(this.left   / Tile.size)\r\n    let tileRight  = Math.floor(this.right  / Tile.size)\r\n    let tileTop    = Math.floor(this.top    / Tile.size)\r\n    let tileBottom = Math.floor(this.bottom / Tile.size)\r\n\r\n    let tiles = []\r\n    let collision = false\r\n    for (let x = tileLeft; x <= tileRight; x++) {\r\n      for (let y = tileTop; y <= tileBottom; y++) {\r\n        let tile = this.game.level.tileAt([x, y])\r\n\r\n        if (tile.solid) {\r\n          collision = true\r\n        }\r\n\r\n        tiles.push(tile)\r\n      }\r\n    }\r\n\r\n    return shouldReturnTiles ? tiles : collision\r\n  }\r\n\r\n  get touchingWallRight(): boolean {\r\n    let tileLeft   = Math.floor(this.right  / Tile.size)\r\n    let tileRight  = tileLeft\r\n    let tileTop    = Math.floor(this.top    / Tile.size)\r\n    let tileBottom = Math.floor(this.bottom / Tile.size)\r\n\r\n    // Weird bug.. dunno why this (helps) fix #19 though. I can't imagine\r\n    // tileBottom is broken! (Right?)\r\n    // TODO Figure this out. Right now it's a plain fix for height=16\r\n    if (this.h === 16) {\r\n      tileBottom--\r\n    }\r\n\r\n    for (let x = tileLeft; x <= tileRight; x++) {\r\n      for (let y = tileTop; y <= tileBottom; y++) {\r\n        const tile = this.game.level.tileAt([x, y])\r\n\r\n        if (tile.solid) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  get touchingWallLeft(): boolean {\r\n    let tileLeft   = Math.floor(this.left   / Tile.size)\r\n    let tileRight  = tileLeft\r\n    let tileTop    = Math.floor(this.top    / Tile.size)\r\n    let tileBottom = Math.floor(this.bottom / Tile.size)\r\n\r\n    // Same deal as touchingWallRight\r\n    if (this.h === 16) {\r\n      tileBottom--\r\n    }\r\n\r\n    for (let x = tileLeft; x <= tileRight; x++) {\r\n      for (let y = tileTop; y <= tileBottom; y++) {\r\n        const tile = this.game.level.tileAt([x, y])\r\n\r\n        if (tile.solid) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  // Handy function to pick tiles around the entity.\r\n  // TODO is this broken? Do tests!\r\n  pickTiles(\r\n    tileLeft: number, tileRight: number, tileTop: number, tileBottom: number\r\n  ): Array <Tile> {\r\n    const tiles = []\r\n\r\n    for (let px = Math.floor(tileLeft); px <= Math.ceil(tileRight); px++) {\r\n      for (let py = Math.floor(tileTop); py <= Math.ceil(tileBottom); py++) {\r\n        tiles.push(this.game.level.tileAt([\r\n          tileLeft + px + this.x / Tile.size, tileTop + py + this.y / Tile.size\r\n        ]))\r\n      }\r\n    }\r\n\r\n    return tiles\r\n  }\r\n\r\n  // Handy function to destroy the entity.\r\n  destroy() {\r\n    this.game.entities.splice(this.game.entities.indexOf(this), 1)\r\n  }\r\n\r\n  // What entities are we touching?\r\n  entityCollides(): Array <Entity> {\r\n    const entities = []\r\n\r\n    for (let entity of this.game.entities) {\r\n      // Don't detect itself!\r\n      if (entity === this) continue\r\n\r\n      if (\r\n        (\r\n          this.left <= entity.left && entity.left <= this.right ||\r\n          this.left <= entity.right && entity.right <= this.right\r\n        ) && (\r\n          this.top <= entity.top && entity.top <= this.bottom ||\r\n          this.top <= entity.bottom && entity.bottom <= this.bottom\r\n        )\r\n      ) {\r\n        entities.push(entity)\r\n      }\r\n    }\r\n\r\n    return entities\r\n  }\r\n  \r\n  // Get the single tile at the centre of the entity.\r\n  get tileOn(): Tile {\r\n    let t = this.game.level.tileAt([\r\n      Math.floor((this.x + this.w / 2) / 16),\r\n      Math.floor((this.y + this.h / 2) / 16)\r\n    ])\r\n\r\n    return t\r\n  }\r\n\r\n  // Get the two (potentially same) tiles ABOVE the entity.\r\n  get tilesAbove(): [Tile, Tile] {\r\n    let l = this.game.level.tileAt([Math.floor(this.x / 16), this.top / 16 - 0.1])\r\n    let r = this.game.level.tileAt([Math.ceil(this.x / 16), this.top / 16 - 0.1])\r\n\r\n    return [l, r]\r\n  }\r\n\r\n  // Get the two (potentially same) tiles BELOW the entity.\r\n  get tilesBelow(): [Tile, Tile] {\r\n    let l = this.game.level.tileAt([Math.floor(this.x / 16), this.bottom / 16 + 0.1])\r\n    let r = this.game.level.tileAt([Math.ceil(this.x / 16), this.bottom / 16 + 0.1])\r\n\r\n    return [l, r]\r\n  }\r\n\r\n  // Whether or not the entity is on the ground or not.\r\n  get grounded(): boolean {\r\n    /*\r\n    return this.pickTiles(0, 0, 1, 1).some(x => x.solid || x.solidTop)\r\n    */\r\n\r\n    return this.tilesBelow.some(tile => tile.solid || tile.solidTop)\r\n  }\r\n\r\n  // Called when another entity touches this entity.\r\n  onTouch(by: Entity) {}\r\n}\r\n\r\nexport class Player extends Entity {\r\n  jumpSound: window.Audio\r\n  errorSound: window.Audio\r\n  lastJump: number\r\n  mayJump: boolean\r\n\r\n  spriteAnimation: {\r\n    time: number,\r\n    anim: string,\r\n    dir: string,\r\n    oldAnim: string,\r\n    nextFrame: number,\r\n  }\r\n  \r\n  state: number // powerup state\r\n  \r\n  lastOn: ?Tile // world map only.\r\n  wantsInput: ?boolean // world map only.\r\n\r\n  constructor(game: SLW, x: number = 0, y:number = 0) {\r\n    super(game)\r\n\r\n    this.sprite.sheet.src = 'sprites/liam-0.png'\r\n    this.sprite.position = [-100, -100]\r\n    this.sprite.positionType = 'absolute'\r\n    this.sprite.width = 19\r\n    this.sprite.height = 32\r\n    this.spriteAnimation = { time: 0, dir: 'right', anim: 'idle', oldAnim: '', nextFrame: 0 }\r\n\r\n    this.x = x\r\n    this.y = y\r\n\r\n    this.w = 15\r\n    this.h = 15\r\n    this.state = 0\r\n    \r\n    this.jumpSound = new window.Audio('sound/smw_jump.wav')\r\n    this.errorSound = new window.Audio('sound/smw_stomp_koopa_kid.wav')\r\n  }\r\n\r\n  update() {\r\n    this.sprite.sheet.src = `sprites/liam-${this.state}.png`\r\n    if (this.state > 0) {\r\n      // big/powerupped\r\n      this.w = 15\r\n      this.h = 31\r\n      this.sprite.width = 19\r\n      this.sprite.height = 32\r\n      this.sprite.positionType = 'absolute'\r\n    } else {\r\n      // small\r\n      this.w = 15\r\n      this.h = 15\r\n      this.sprite.width = 16\r\n      this.sprite.height = 16\r\n    }\r\n    \r\n    if (this.game.level.meta.special.includes('world')) {\r\n      // overworld/map..\r\n      \r\n      // small hitbox allows for greater movement\r\n      // TODO\r\n      this.w = 15\r\n      this.h = 15\r\n      \r\n      const on = this.tileOn\r\n      if (!this.lastOn) {\r\n        this.wantsInput = true\r\n      }\r\n      \r\n      if (on.name === 'Path' && !this.wantsInput) {\r\n        // we're already moving!\r\n        \r\n        this.spriteAnimation.anim = 'walk'\r\n        if (this.xv > 0) this.spriteAnimation.dir = 'right'\r\n        if (this.xv < 0) this.spriteAnimation.dir = 'left'\r\n        if (this.yv > 0) this.spriteAnimation.dir = 'down'\r\n        if (this.yv < 0) this.spriteAnimation.dir = 'up'\r\n        \r\n        // we need to be on a NEW tile to do anything:\r\n        if (!this.lastOn || on.texPosition !== this.lastOn.texPosition) {\r\n          const [h, v] = on.texPosition\r\n          //console.log([h, v])\r\n          \r\n          if (h == 2 && v == 8) {\r\n            // vertical straight\r\n            console.log('|')\r\n          }\r\n          \r\n          if (h == 1 && v == 9) {\r\n            // horizontal straight\r\n            console.log('-')\r\n          }\r\n          \r\n          if (h == 3 && v == 9) {\r\n            // up/left turn\r\n            console.log('/')\r\n            \r\n            if(this.yv === 0) {\r\n              // from left\r\n              this.xv = 0\r\n              this.yv = -16\r\n            } else {\r\n              // from up\r\n              this.xv = -16\r\n              this.yv = 0\r\n            }\r\n          }\r\n          \r\n          if (h == 3 && v == 8) {\r\n            // down/right turn\r\n            console.log('/')\r\n            \r\n            if(this.yv === 0) {\r\n              // from right\r\n              this.xv = 0\r\n              this.yv = 16\r\n            } else {\r\n              // from down\r\n              this.xv = 16\r\n              this.yv = 0\r\n            }\r\n          }\r\n          \r\n          if (h == 1 && v == 8) {\r\n            // up/right turn\r\n            console.log('\\\\')\r\n            \r\n            if(this.yv === 0) {\r\n              // from right\r\n              this.xv = 0\r\n              this.yv = -16\r\n            } else {\r\n              // from up\r\n              this.xv = 16\r\n              this.yv = 0\r\n            }\r\n          }\r\n          \r\n          if (h == 1 && v == 10) {\r\n            // down/left turn\r\n            console.log('\\\\')\r\n            \r\n            if(this.yv === 0) {\r\n              // from left\r\n              this.xv = 0\r\n              this.yv = 16\r\n            } else {\r\n              // from down\r\n              this.xv = -16\r\n              this.yv = 0\r\n            }\r\n          }\r\n          \r\n          if (h == 2 && v == 10) {\r\n            // up/down T-junction\r\n            this.xv = 0\r\n            this.yv = 0\r\n            this.wantsInput = true\r\n          }\r\n        }\r\n      } else {\r\n        this.xv = 0\r\n        this.yv = 0\r\n        \r\n        // take input..\r\n        // TODO don't allow passing by [3, 10] tiles (uncompleted levels)\r\n        this.spriteAnimation.anim = 'idle'\r\n        \r\n        if (this.game.keys[39]) {\r\n          this.xv = 16\r\n          this.spriteAnimation.dir = 'right'\r\n        } else if (this.xv > 0) {\r\n          this.xv = 0\r\n        }\r\n        \r\n        if (this.game.keys[37]) {\r\n          this.xv = -16\r\n          this.spriteAnimation.dir = 'left'\r\n        } else if (this.xv < 0) {\r\n          this.xv = 0\r\n        }\r\n        \r\n        if (this.game.keys[40]) {\r\n          this.yv = 16\r\n          this.spriteAnimation.dir = 'down'\r\n        } else if (this.yv > 0) {\r\n          this.yv = 0\r\n        }\r\n        \r\n        if (this.game.keys[38]) {\r\n          this.yv = -16\r\n          this.spriteAnimation.dir = 'up'\r\n        } else if (this.yv < 0) {\r\n          this.yv = 0\r\n        }\r\n\r\n        if (on.name === 'Level' && isYes(this.game.keys)) {\r\n          // open level!\r\n          // TODO some animation?\r\n\r\n          const lv = this.game.level.meta.id + '-' + on.levelid\r\n\r\n          if (lv in levels) {\r\n            this.w = 15\r\n            this.h = 31\r\n\r\n            this.game.level.destroy() // bye bye world map\r\n            this.game.level = new Level(this.game, lv, this.game.level.tileset)\r\n            this.game.level.create()  // hello level\r\n\r\n            this.game.tick = 0\r\n          } else {\r\n            this.errorSound.play()\r\n          }\r\n        }\r\n      }\r\n\r\n      this.lastOn = on\r\n    } else {\r\n      // input:\r\n\r\n      if (Math.abs(this.xv) < 0.2 && this.grounded) {\r\n        this.spriteAnimation.anim = 'idle'\r\n      }\r\n\r\n      if (this.game.keys[39]) {\r\n        this.xv += 0.2\r\n        if (this.grounded) this.spriteAnimation.anim = 'walk'\r\n      } else if(this.xv > 0) {\r\n        this.xv = Math.max(0, this.xv - 0.4)\r\n      }\r\n\r\n      if (this.game.keys[37]) {\r\n        // xv\r\n        this.xv -= 0.2\r\n        if (this.grounded) this.spriteAnimation.anim = 'walk'\r\n      } else if(this.xv < 0) {\r\n        this.xv = Math.min(0, this.xv + 0.4)\r\n      }\r\n\r\n      if (Math.abs(this.xv) < 0.1) {\r\n        this.xv = 0\r\n      }\r\n\r\n      this.xv = Math.min(this.xv,  4)\r\n      this.xv = Math.max(this.xv, -4)\r\n\r\n      if (this.grounded && isJump(this.game.keys) && this.mayJump) {\r\n        // jump height is based on how long you hold the key[s]\r\n        // you can hold it for longer if your xv is higher\r\n\r\n        this.yv = -3.5\r\n        this.lastJump = Date.now()\r\n\r\n        this.jumpSound.play()\r\n        this.spriteAnimation.anim = 'jump'\r\n        this.mayJump = false\r\n      } else if(isJump(this.game.keys) && this.yv < -3 && Date.now() - this.lastJump < 100 + Math.abs(this.xv) * 50) {\r\n        this.yv = -3.5\r\n      } else if(!isJump(this.game.keys)) {\r\n        // we may jump next frame\r\n        this.mayJump = true\r\n      }\r\n\r\n      if(this.yv > 0 && this.spriteAnimation.anim !== 'jump' && !this.grounded) {\r\n        this.spriteAnimation.anim = 'fall'\r\n      }\r\n\r\n      if(this.xv > 0) this.spriteAnimation.dir = 'right'\r\n      if(this.xv < 0) this.spriteAnimation.dir = 'left'\r\n\r\n      this.yv = Math.min(this.yv,  4)\r\n      this.yv += GRAVITY\r\n    }\r\n\r\n    // actually move:\r\n    super.update(this.wantsInput == true || !this.game.level.meta.special.includes('world'))\r\n    \r\n    if (this.xv !== 0 || this.yv !== 0) this.wantsInput = false\r\n  }\r\n\r\n  draw() {\r\n    // Animation..\r\n    const anim = this.spriteAnimation\r\n    if (anim.anim !== anim.oldAnim) {\r\n      anim.oldAnim = anim.anim\r\n      anim.time = 0\r\n      anim.nextFrame = 0\r\n    }\r\n\r\n    if (anim.anim === 'walk' || (anim.anim === 'idle' && anim.oldAnim === 'walk')) {\r\n      if (anim.time >= anim.nextFrame) {\r\n        anim.nextFrame = (\r\n          Math.ceil(anim.time + Math.max(12 - Math.abs(this.xv * 3), 8))\r\n        )\r\n\r\n        if (this.state === 0) {\r\n          if (this.sprite.position[0] === 32) {\r\n            this.sprite.position[0] = 0\r\n          } else if (this.sprite.position[0] === 16) {\r\n            this.sprite.position[0] = 32\r\n          } else if (this.sprite.position[0] === 0) {\r\n            if(anim.anim === 'walk') this.sprite.position[0] = 16\r\n          } else {\r\n            this.sprite.position[0] = 0\r\n          }\r\n        } else {\r\n          if (this.sprite.position[0] === 57) {\r\n            this.sprite.position[0] = 0\r\n          } else if (this.sprite.position[0] === 38) {\r\n            this.sprite.position[0] = 57\r\n          } else if (this.sprite.position[0] === 19) {\r\n            if(anim.anim === 'walk') this.sprite.position[0] = 38\r\n          } else {\r\n            this.sprite.position[0] = 19\r\n          }\r\n        }\r\n      }\r\n    } else if (anim.anim === 'idle') {\r\n      this.sprite.position[0] = this.state === 0 ? 0 : 19\r\n    } else if (anim.anim === 'jump') {\r\n      this.sprite.position[0] = this.state === 0 ? 48 : 76\r\n    } else if (anim.anim === 'fall') {\r\n      this.sprite.position[0] = this.state === 0 ? 32 : 97\r\n    }\r\n\r\n    this.sprite.position[1] = this.state === 0 ? ({\r\n      left: 16,\r\n      right: 0,\r\n      up: 48,\r\n      down: 32,\r\n    })[anim.dir] : (anim.dir === 'left' ? 32 : 0)\r\n    this.spriteAnimation.time++ // could use this.game.tick\r\n\r\n    super.draw()\r\n  }\r\n\r\n  destroy() {\r\n    // go back to world map:\r\n    \r\n    const lv = this.game.level.meta.world\r\n    const id = this.game.level.meta.id\r\n    \r\n    this.game.level.destroy() // bye bye current level\r\n    this.game.level = new Level(this.game, lv, this.game.level.tileset)\r\n    this.game.level.create()  // hello world map\r\n    \r\n    this.game.tick = 0\r\n    this.state = 0\r\n    \r\n    // find the last level in the map\r\n    for (let row of this.game.level.tilemap) {\r\n      for (let tile of row) {\r\n        if (tile.name === 'Level' && tile.levelid == id) {\r\n          // go there!\r\n          this.x = tile.x * Tile.size\r\n          this.y = tile.y * Tile.size\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class Goomba extends Entity {\r\n  constructor(game: SLW, x: number = 0, y: number = 0) {\r\n    super(game)\r\n\r\n    this.x = x\r\n    this.y = y\r\n    this.z = 1\r\n\r\n    this.w = 16\r\n    this.h = 16\r\n\r\n    this.xv = 2\r\n  }\r\n\r\n  update() {\r\n    // TODO goombas walk and then turn around when they bump into something\r\n\r\n    this.yv += GRAVITY\r\n    super.update()\r\n  }\r\n}\r\n\r\nexport class Powerup extends Entity {\r\n  constructor(game: SLW, x: number = 0, y: number = 0, xv: number = 1) {\r\n    super(game)\r\n\r\n    this.sprite.sheet.src = 'tileset.png'\r\n\r\n    this.x = x\r\n    this.y = y\r\n    this.z = 2\r\n\r\n    this.w = 16\r\n    this.h = 16\r\n\r\n    this.xv = xv\r\n    this.sprite.position = [0, 0]\r\n  }\r\n\r\n  update() {\r\n    this.yv += GRAVITY * 0.7\r\n    \r\n    let o = this.xv\r\n    \r\n    this.x += this.xv\r\n    if (this.touchingWallRight || this.touchingWallLeft) o = this.xv * -1\r\n    this.x -= this.xv\r\n    \r\n    this.xv = o\r\n\r\n    super.update()\r\n  }\r\n\r\n  onTouch(by: Entity) {\r\n    if (by instanceof Player) this.destroy()\r\n  }\r\n}\r\n\r\nexport class Mushroom extends Powerup {\r\n  constructor(...args: any) {\r\n    super(...args)\r\n\r\n    this.sprite.position = [0, 2]\r\n  }\r\n  \r\n  onTouch(by: Entity) {\r\n    if (by instanceof Player && by.state === 0) {\r\n      by.state = 1 // small to big\r\n      by.y -= Tile.size\r\n    }\r\n    \r\n    super.onTouch(by)\r\n  }\r\n}\r\n\r\nexport class Sign extends Entity {\r\n  constructor(game: SLW, x: number = 0, y: number = 0) {\r\n    super(game)\r\n\r\n    this.x = x\r\n    this.y = y\r\n\r\n    this.w = 44\r\n    this.h = 45\r\n\r\n    this.game.entities.push(this)\r\n\r\n    this.sprite.sheet.src = 'tileset.png'\r\n    this.sprite.positionType = 'absolute'\r\n    this.sprite.position = [80, 32]\r\n    this.sprite.width = 44\r\n    this.sprite.height = 47\r\n  }\r\n}\r\n\r\nexport class Coin extends Entity {\r\n  coinSound: window.Audio\r\n\r\n  spriteAnimation: {\r\n    time: number,\r\n    nextFrame: number\r\n  }\r\n\r\n  constructor(game: SLW, x: number = 0, y: number = 0) {\r\n    super(game)\r\n\r\n    this.x = x\r\n    this.y = y\r\n\r\n    this.w = 16\r\n    this.h = 16\r\n\r\n    this.sprite.sheet.src = 'sprites/coin.png'\r\n    this.sprite.width = 16\r\n    this.sprite.height = 16\r\n\r\n    this.spriteAnimation = {time: 0, nextFrame: 0}\r\n\r\n    this.coinSound = new window.Audio('sound/smw_coin.wav')\r\n  }\r\n\r\n  update() {\r\n    const anim = this.spriteAnimation\r\n\r\n    if (anim.time >= anim.nextFrame) {\r\n      anim.nextFrame = anim.time + 10\r\n      this.sprite.position[0] = (this.sprite.position[0] + 1) % 4\r\n    }\r\n\r\n    anim.time++\r\n  }\r\n\r\n  onTouch(by: Entity) {\r\n    if(by instanceof Player) {\r\n      this.coinSound.play()\r\n      this.destroy()\r\n    }\r\n  }\r\n}\r\n","// @flow\r\n\r\nconst toml = require('toml')\r\n\r\nconst MUSIC_VOLUMES = {\r\n  airship: 0.25,\r\n  athletic: 0.25,\r\n  beach: 1,\r\n  castle: 0.25,\r\n  'ice-cave': 0.25,\r\n  'file-select': 0.5,\r\n  'flower-gardens': 1,\r\n  'grassland': 0.15,\r\n  'jungle': 0.25,\r\n  'kapper-valley': 0.25,\r\n  'star-world': 0.25,\r\n  'underwater-underworld': 1,\r\n  'water': 0.25,\r\n  'underground': 0.5,\r\n}\r\n\r\nimport SLW from './SLW'\r\nimport Tile from './Tile'\r\nimport { levels } from './util'\r\n\r\ntype Position = [number, number]\r\n\r\nexport default class Level {\r\n  game: SLW\r\n\r\n  meta: Object // see levels.toml\r\n  tileset: Image\r\n  tilemap: Array <Array <Tile>>\r\n  debug: boolean\r\n\r\n  w: number // width\r\n  h: number // height\r\n\r\n  music: window.Audio\r\n  \r\n  static metaOf(levelid) {\r\n    return levels[levelid]\r\n  }\r\n\r\n  constructor(\r\n    game: SLW,\r\n    levelid: string,\r\n    tileset: Image,\r\n  ) {\r\n    this.game = game\r\n\r\n    this.tileset = tileset\r\n    this.meta = levels[levelid]\r\n    this.debug = this.meta.debug ? true : false\r\n\r\n    const leveldata = this.meta.tilemap\r\n\r\n    // Convert tilemap into a 2D array of Tiles:\r\n    this.tilemap = []\r\n    let rows = leveldata.split('\\n')\r\n    for (let y = 0; y < rows.length-1; y++) {\r\n      this.tilemap[y] = []\r\n      let row = rows[y]\r\n      for (let x = 0; x < row.length; x++) {\r\n        let tileid = row[x]\r\n        if(this.meta.special.includes('world')) tileid = 'W ' + tileid\r\n        \r\n        let tile = new (Tile.get(tileid))(this.game)\r\n\r\n        tile.x = x\r\n        tile.y = y\r\n        tile.game = game\r\n        tile.exists = true\r\n\r\n        this.tilemap[y].push(tile)\r\n      }\r\n    }\r\n\r\n    this.h = this.tilemap.length\r\n    this.w = this.tilemap[0].length\r\n\r\n    this.music = new window.Audio('sound/music/' + this.meta.music + '.mp3')\r\n    this.music.volume = MUSIC_VOLUMES[this.meta.music] || 0.5 // to normalize\r\n    this.music.loop = true\r\n    this.music.play() // load automatically\r\n  }\r\n  \r\n  create() {\r\n    // Call create() on the Level Tiles\r\n    for (let row of this.tilemap) {\r\n      for (let tile of row) {\r\n        tile.onCreate()\r\n      }\r\n    }\r\n  }\r\n  \r\n  destroy() {\r\n    this.music.pause()\r\n  }\r\n\r\n  update() {\r\n    // Call update() on the tilemap's Tiles\r\n    for (let row of this.tilemap) {\r\n      for (let tile of row) {\r\n        tile.onUpdate()\r\n      }\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    // Draw the tilemap\r\n    const ctx = this.game.canvas.getContext('2d')\r\n    if (!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n    const viewStartX = Math.floor(this.game.camera[0] / Tile.size)\r\n    const viewStartY = Math.floor(this.game.camera[1] / Tile.size)\r\n    const viewEndX = Math.ceil(this.game.camera[0] / Tile.size) + 25\r\n    const viewEndY = Math.ceil(this.game.camera[1] / Tile.size) + 25\r\n\r\n    for (let y = viewStartY; y < viewEndY; y++) {\r\n      for (let x = viewStartX; x < viewEndX; x++) {\r\n        const tile = this.tileAt([x, y])\r\n        const [rendX, rendY] = this.getAbsolutePosition([x, y])\r\n        const [tileX, tileY] = tile.texPosition\r\n\r\n        ctx.drawImage(\r\n          this.tileset,\r\n          tileX * Tile.size, tileY * Tile.size,\r\n          Tile.size, Tile.size,\r\n\r\n          rendX + tile.dx, rendY + tile.dy, Tile.size, Tile.size)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Get a Tile from its Position in the tilemap.\r\n  tileAt([tileX: number, tileY: number]: Position): Tile {\r\n    tileX = Math.floor(tileX)\r\n    tileY = Math.floor(tileY)\r\n\r\n    try {\r\n      let r = this.tilemap[tileY][tileX]\r\n      if(typeof r === 'undefined') throw 'nope'\r\n      return r\r\n    } catch(e) {\r\n      // fallback to Air tile\r\n      //console.warn(`Level.tileAt([${tileX}, ${tileY}]): Failed to retrieve Tile`)\r\n      return new (Tile.get('-'))(this.game)\r\n    }\r\n  }\r\n\r\n  replaceTile([tileX: number, tileY: number]: Position, newTile: Tile): Tile {\r\n    newTile.x = tileX\r\n    newTile.y = tileY\r\n    newTile.game = this.game\r\n    newTile.exists = true\r\n\r\n    let oldTile = this.tileAt([tileX, tileY])\r\n    oldTile.exists = false\r\n    oldTile.onDestroy()\r\n\r\n    this.tilemap[tileY][tileX] = newTile\r\n    newTile.onCreate()\r\n\r\n    return newTile\r\n  }\r\n\r\n  // Gets the drawn position of a given tile position. For example, assuming\r\n  // that the tile size is 16, getDrawnPosition([0, 2]) would become [0, 32].\r\n  getAbsolutePosition([tileX, tileY]: Position): Position {\r\n    return [\r\n      Math.floor(tileX * Tile.size),\r\n      Math.floor(tileY * Tile.size)\r\n    ]\r\n  }\r\n}\r\n","// @flow\r\n\r\n// SUPER LIAM WORLD(tm)\r\n// totally not stolen from an-ok-squirrel.\r\n// this is a fair use of the name as specified\r\n// in NANALAND RULES NUMBER #99\r\n\r\ntype Position = [number, number]\r\n\r\nimport Tile from './Tile'\r\nimport Text from './Text'\r\nimport Level from './Level'\r\nimport { Entity, Player } from './Entity'\r\n\r\nconst BG_COLORS = {\r\n  clouds: '#A0D0F8',\r\n  hills: '#F8E0B0',\r\n}\r\n\r\nconst BG_REPEATS = {\r\n  clouds: 'repeat-x',\r\n  hills: 'repeat-y',\r\n}\r\n\r\nexport default class SLW {\r\n  // Map to store key-pressed data in.\r\n  keys: Object\r\n\r\n  // Canvas used to display the game on.\r\n  canvas: HTMLCanvasElement\r\n\r\n  // Player object - the character that walks around the screen using the\r\n  // user's input as controls.\r\n  player: Player\r\n\r\n  // Camera position. Used for scrolling.\r\n  camera: Position\r\n  \r\n  // Cursor (mouse) position, relative to the canvas.\r\n  cursor: Position\r\n\r\n  // Level, to contain information about the currently active level.\r\n  level: Level\r\n\r\n  // Amount of draw()s called since we started.\r\n  tick: number\r\n\r\n  entities: Array <Entity>\r\n\r\n  constructor(levelid: string, tileset: Image) {\r\n    this.keys = {}\r\n    this.cursor = [0, 0]\r\n    this.entities = []\r\n\r\n    this.canvas = document.createElement('canvas')\r\n    this.canvas.width = 20 * 20\r\n    this.canvas.height = 20 * 20\r\n\r\n    this.canvas.addEventListener('keydown', (evt: KeyboardEvent) => {\r\n      this.keys[evt.keyCode] = true\r\n    })\r\n\r\n    this.canvas.addEventListener('keyup', (evt: KeyboardEvent) => {\r\n      this.keys[evt.keyCode] = false\r\n    })\r\n    \r\n    this.canvas.addEventListener('mousemove', (evt: MouseEvent) => {\r\n      let rect = this.canvas.getBoundingClientRect()\r\n      this.cursor = [evt.clientX - rect.left, evt.clientY - rect.top]\r\n    })\r\n\r\n    this.canvas.setAttribute('tabindex', '1')\r\n\r\n    this.player = new Player(this, 16, 16)\r\n    this.camera = [0, 0]\r\n    this.level = new Level(this, levelid, tileset)\r\n    this.tick = 0\r\n\r\n    this.level.create()\r\n  }\r\n\r\n  // Clears the game canvas.\r\n  canvasClear() {\r\n    const ctx = this.canvas.getContext('2d')\r\n\r\n    if (ctx instanceof CanvasRenderingContext2D) {\r\n      ctx.fillStyle = BG_COLORS[this.level.meta.background] || 'black'\r\n      ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)\r\n    }\r\n  }\r\n\r\n  // Modify the camera position to reflect where the player is.\r\n  // Essentially, this is just scrolling.\r\n  cameraUpdate() {\r\n    let x = this.player.x\r\n    let y = this.player.y\r\n\r\n    let minY = Tile.size + this.canvas.height / 2\r\n    let maxY = (this.level.h - 1) * Tile.size - this.canvas.height / 2\r\n    let minX = Tile.size + this.canvas.width / 2\r\n    let maxX = (this.level.w - 1) * Tile.size - this.canvas.width / 2\r\n\r\n    if(y < minY) y = minY\r\n    if (y > maxY) y = maxY\r\n    if (x < minX) x = minX\r\n    if (x > maxX) x = maxX\r\n\r\n    if (this.level.meta.special.includes('floating')) {\r\n      // airship-like level, wave the camera y\r\n      let wave = Math.sin(this.tick / 40) * Tile.size / 2\r\n      y += wave\r\n    }\r\n\r\n    let lag = this.tick > 0 ? 8 : 1\r\n    this.camera[0] += (x - this.canvas.width / 2 - this.camera[0]) / lag\r\n    this.camera[1] += (y - this.canvas.height / 2 - this.camera[1]) / lag\r\n  }\r\n\r\n  // Update all the entities.\r\n  entityUpdate() {\r\n    this.entities.forEach(e => e.update())\r\n  }\r\n\r\n  // Draw all the things.\r\n  draw() {\r\n    const ctx = this.canvas.getContext('2d')\r\n    if (!(ctx instanceof CanvasRenderingContext2D)) return\r\n\r\n    let tx = -0.25 * this.camera[0]\r\n    let ty = -0.25 * this.camera[1]\r\n    if (this.level.meta.special.includes('floating')) tx += -0.25 * this.tick\r\n\r\n    ctx.save()\r\n    ctx.translate(tx, ty)\r\n\r\n    if(this.level.meta.background === 'none') {\r\n      var ptrn = 'black'\r\n    } else {\r\n      let bg = new Image\r\n      bg.src = `background/${this.level.meta.background}.png`\r\n      var ptrn = ctx.createPattern(bg, BG_REPEATS[this.level.meta.background] || 'repeat')\r\n    }\r\n\r\n    ctx.fillStyle = ptrn\r\n    ctx.fillRect(-tx, -ty, this.canvas.width, this.canvas.height)\r\n\r\n    ctx.restore()\r\n\r\n    // scroll\r\n    ctx.save()\r\n    ctx.translate(Math.floor(-this.camera[0]), Math.floor(-this.camera[1]))\r\n\r\n    const entities = this.entities.sort((a, b) => {\r\n      if(a.z > b.z) return 1\r\n      if(a.z < b.z) return -1\r\n      return 0\r\n    })\r\n    entities.filter(e => e.z < 0).forEach(e => e.draw())\r\n    this.level.draw()\r\n    entities.filter(e => e.z >= 0).forEach(e => e.draw())\r\n    this.player.draw()\r\n\r\n    /*\r\n    ctx.fillStyle = 'red'\r\n    ctx.fillRect(Tile.size, (this.level.h - 1) * Tile.size, (this.level.w - 2) * Tile.size, 1)\r\n    ctx.fillRect(Tile.size, Tile.size, 1, (this.level.h - 2) * Tile.size)\r\n    ctx.fillRect((this.level.w - 1) * Tile.size, Tile.size, 1, (this.level.h - 2) * Tile.size)\r\n    */\r\n\r\n    // unscroll\r\n    ctx.restore()\r\n\r\n    // GUI:\r\n    \r\n    if (this.level.meta.special.includes('world')) {\r\n      let on = this.player.tileOn\r\n      let str = this.level.meta.name\r\n\r\n      if (on.name === 'Level') {\r\n        let level = Level.metaOf(this.level.meta.id + '-' + on.levelid)\r\n\r\n        if (level) {\r\n          str += ' . ' + (on.levelid || 0)  + ' ' + level.name\r\n        } else {\r\n          str += ' . Level doesn\\'t exist rip'\r\n        }\r\n      }\r\n      \r\n      ctx.drawImage(Text.write(str), 4, 4)\r\n    }\r\n\r\n    if (this.level.debug) {\r\n      ctx.drawImage(Text.write('x: '+this.player.x), 2, 6)\r\n      ctx.drawImage(Text.write('y: '+this.player.y), 2, 8)\r\n    }\r\n    \r\n    let cursor = new Image\r\n    cursor.src = 'sprites/cursor.png'\r\n    ctx.drawImage(cursor, Math.floor(this.cursor[0] / 16) * 16 - 4, Math.floor(this.cursor[1] / 16) * 16 - 4)\r\n    \r\n    this.tick++\r\n  }\r\n}\r\n","import { tint } from './util'\r\n\r\nexport default Text = {\r\n  // Writes some text and returns a canvas with the text on it.\r\n  //\r\n  // Typically used in combination with ctx.drawImage:\r\n  //   ctx.drawImage(Text.write('Hello World!'), 0, 0)\r\n  write: function(str: string = '', color: string = 'black') {\r\n    let canvas = document.createElement('canvas')\r\n    canvas.width = Math.max(...str.split('\\n').map(chars => chars.length)) * 8\r\n    canvas.height = str.split('\\n').length * 8\r\n    \r\n    let ctx = canvas.getContext('2d')\r\n    if (!ctx) throw new TypeError('Failed to get new canvas context.')\r\n    \r\n    let img = tint(Text.set, color)\r\n    \r\n    let x = 0, y = 0\r\n    for (let i in str) {\r\n      let char = str[i]\r\n      \r\n      if (char === '\\n') {\r\n        x = 0\r\n        y += 8\r\n      } else {\r\n        let [dx, dy] = Text.map[char] || [0, 0]\r\n        \r\n        ctx.drawImage(img, dx * 8, dy * 8 + 1, 8, 8, x, y, 8, 8)\r\n        \r\n        x += 8\r\n      }\r\n    }\r\n    \r\n    return canvas\r\n  },\r\n  \r\n  set: new Image,\r\n  \r\n  map: {\r\n    'A': [0, 0],\r\n    'B': [1, 0],\r\n    'C': [2, 0],\r\n    'D': [3, 0],\r\n    'E': [4, 0],\r\n    'F': [5, 0],\r\n    'G': [6, 0],\r\n    'H': [7, 0],\r\n    'I': [8, 0],\r\n    'J': [9, 0],\r\n    'K': [10, 0],\r\n    'L': [11, 0],\r\n    'M': [12, 0],\r\n    'N': [13, 0],\r\n    'O': [14, 0],\r\n    'P': [15, 0],\r\n    'Q': [16, 0],\r\n    'R': [17, 0],\r\n    'S': [0, 1],\r\n    'T': [1, 1],\r\n    'U': [2, 1],\r\n    'V': [3, 1],\r\n    'W': [4, 1],\r\n    'X': [5, 1],\r\n    'Y': [6, 1],\r\n    'Z': [7, 1],\r\n    \r\n    'a': [8, 1],\r\n    'b': [9, 1],\r\n    'c': [10, 1],\r\n    'd': [11, 1],\r\n    'e': [12, 1],\r\n    'f': [13, 1],\r\n    'g': [14, 1],\r\n    'h': [15, 1],\r\n    'i': [16, 1],\r\n    'j': [17, 1],\r\n    'k': [0, 2],\r\n    'l': [1, 2],\r\n    'm': [2, 2],\r\n    'n': [3, 2],\r\n    'o': [4, 2],\r\n    'p': [5, 2],\r\n    'q': [6, 2],\r\n    'r': [7, 2],\r\n    's': [8, 2],\r\n    't': [9, 2],\r\n    'u': [10, 2],\r\n    'v': [11, 2],\r\n    'w': [12, 2],\r\n    'x': [13, 2],\r\n    'y': [14, 2],\r\n    'z': [15, 2],\r\n    \r\n    '?': [0, 3],\r\n    '!': [1, 3],\r\n    '.': [2, 3],\r\n    \"'\": [3, 3],\r\n    '(': [4, 3],\r\n    ')': [5, 3],\r\n    '#': [6, 3],\r\n    ' ': [7, 3],\r\n    '-': [8, 3],\r\n    \r\n    '0': [0, 4],\r\n    '1': [1, 4],\r\n    '2': [2, 4],\r\n    '3': [3, 4],\r\n    '4': [4, 4],\r\n    '5': [5, 4],\r\n    '6': [6, 4],\r\n    '7': [7, 4],\r\n    '8': [8, 4],\r\n    '9': [9, 4],\r\n  },\r\n}\r\n\r\nText.set.src = 'sprites/text.png'\r\n","// @flow\r\n\r\nimport SLW from './SLW'\r\nimport { rnd } from './util'\r\nimport { Entity, Player, Goomba, Mushroom, Sign, Coin } from './Entity'\r\n\r\ntype Position = [number, number]\r\n\r\nexport default class Tile {\r\n  game: SLW\r\n\r\n  // Human-readable name\r\n  name: string\r\n\r\n  // Absolute [x, y] position in tileset.png\r\n  texPosition: Position\r\n\r\n  // true if objects should collide with this tile\r\n  solid: boolean\r\n\r\n  // If solid is false, should the top be solid anyways?\r\n  solidTop: boolean\r\n\r\n  x: number // static\r\n  y: number // static\r\n  dx: number\r\n  dy: number\r\n\r\n  exists: boolean\r\n  \r\n  levelid: ?number // WorldLevelTile only\r\n\r\n  constructor(game: SLW, props: Object = {}) {\r\n    this.game = game\r\n\r\n    this.name = props.name || 'Unknown'\r\n    this.texPosition = props.texPosition\r\n    this.solid = props.solid || false\r\n    this.solidTop = props.solidTop || false\r\n    this.exists = false\r\n\r\n    this.dx = 0\r\n    this.dy = 0\r\n  }\r\n\r\n  static size: number\r\n\r\n  // Get a Tile class from its String representation.\r\n  static get(str: string): Class<Tile> {\r\n    let tile = tilemap.get(str)\r\n\r\n    if(tile) return tile\r\n    else throw new RangeError('Tile ' + str + ' not found.')\r\n  }\r\n\r\n  // Called when this Tile comes into existence, e.g. the level loads.\r\n  onCreate() {}\r\n\r\n  // Called if and when this Tile is replaced with another.\r\n  onDestroy() {}\r\n\r\n  // Called every frame.\r\n  onUpdate() {}\r\n\r\n  // Called if and when this Tile is colliding with an entity.\r\n  // (Won't work if { solid: true }!)\r\n  onTouch(by: Entity) {}\r\n\r\n  // Same deal, but for when it's being standed on.\r\n  onStand(by: Entity) {}\r\n\r\n  // Air punched, e.g. hitting a question mark block.\r\n  onAirPunch() {}\r\n}\r\n\r\nexport const tilemap: Map <string, Class<Tile>> = new Map([\r\n  ['=', class GroundTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Ground',\r\n        texPosition: [4, 5],\r\n        solid: true\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // we need to look at our adjacient tiles to figure out\r\n      // how we should be displayed:\r\n\r\n      let topTile    = this.game.level.tileAt([this.x, this.y - 1])\r\n      let bottomTile = this.game.level.tileAt([this.x, this.y + 1])\r\n      let leftTile   = this.game.level.tileAt([this.x - 1, this.y])\r\n      let rightTile  = this.game.level.tileAt([this.x + 1, this.y])\r\n\r\n      let top    = topTile.name    === this.name\r\n      let bottom = bottomTile.name === this.name\r\n      let left   = leftTile.name   === this.name\r\n      let right  = rightTile.name  === this.name\r\n\r\n      let topLeftTile = this.game.level.tileAt([this.x - 1, this.y - 1])\r\n      let topRightTile = this.game.level.tileAt([this.x + 1, this.y - 1])\r\n      let bottomLeftTile = this.game.level.tileAt([this.x - 1, this.y + 1])\r\n      let bottomRightTile = this.game.level.tileAt([this.x + 1, this.y + 1])\r\n\r\n      let topLeft = topLeftTile.name === this.name\r\n      let topRight = topRightTile.name === this.name\r\n      let bottomLeft = bottomLeftTile.name === this.name\r\n      let bottomRight = bottomRightTile.name === this.name\r\n\r\n      if(top && left && right && bottom) this.texPosition = [1, 6]\r\n      if(!top && left && right && bottom) this.texPosition = [1, 5]\r\n      if(!top && !left && right && bottom) this.texPosition = [0, 5]\r\n      if(!top && left && !right && bottom) this.texPosition = [2, 5]\r\n      if(top && !left && right && bottom) this.texPosition = [0, 6]\r\n      if(top && !left && right && !bottom) this.texPosition = [0, 7]\r\n      if(top && left && right && !bottom) this.texPosition = [1, 7]\r\n      if(top && left && !right && !bottom) this.texPosition = [2, 7]\r\n      if(top && left && !right && bottom) this.texPosition = [2, 6]\r\n\r\n      if(top && left && right && bottom && !topLeft && !topRight)\r\n        this.texPosition = [5, 5]\r\n\r\n      if(top && left && right && bottom && !topLeft && topRight)\r\n        this.texPosition = [3, 6]\r\n\r\n      if(top && left && right && bottom && topLeft && !topRight)\r\n        this.texPosition = [4, 6]\r\n\r\n      if(top && left && right && bottom && !bottomLeft)\r\n        this.texPosition = [6, 6]\r\n\r\n      if(top && left && right && bottom && !bottomRight)\r\n        this.texPosition = [5, 6]\r\n\r\n      if(!top && left && right && bottom && !bottomRight)\r\n        this.texPosition = [6, 5]\r\n\r\n      if(!top && left && right && bottom && !bottomLeft)\r\n        this.texPosition = [7, 5]\r\n\r\n      if(top && left && right && !bottom && !topLeft && !topRight)\r\n        this.texPosition = [6, 7]\r\n\r\n      if(!top && !left && right && !bottom) this.texPosition = [3, 7]\r\n      if(left && right && !bottom && !top) this.texPosition = [4, 7]\r\n      if(left && !right && !bottom && !top) this.texPosition = [5, 7]\r\n      if(!top && !left && !right && bottom) this.texPosition = [3, 5]\r\n\r\n      if(top && !left && !right && bottom) this.texPosition = [7, 6]\r\n      if(top && !left && !right && !bottom) this.texPosition = [7, 7]\r\n\r\n      if(top && left && !right && bottom && !topLeft) this.texPosition = [8, 5]\r\n\r\n      // TODO\r\n    }\r\n  }],\r\n\r\n  ['P', class PipeTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Pipe',\r\n        texPosition: [8, 4],\r\n        solid: true\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // we need to look at our adjacient tiles to figure out\r\n      // how we should be displayed:\r\n\r\n      let topTile    = this.game.level.tileAt([this.x, this.y - 1])\r\n      let bottomTile = this.game.level.tileAt([this.x, this.y + 1])\r\n      let leftTile   = this.game.level.tileAt([this.x - 1, this.y])\r\n      let rightTile  = this.game.level.tileAt([this.x + 1, this.y])\r\n\r\n      let top    = topTile.name    === this.name\r\n      let bottom = bottomTile.name === this.name\r\n                || bottomTile.name === 'Ground'\r\n      let left   = leftTile.name   === this.name\r\n      let right  = rightTile.name  === this.name\r\n\r\n      let topLeftTile = this.game.level.tileAt([this.x - 1, this.y - 1])\r\n      let topRightTile = this.game.level.tileAt([this.x + 1, this.y - 1])\r\n      let bottomLeftTile = this.game.level.tileAt([this.x - 1, this.y + 1])\r\n      let bottomRightTile = this.game.level.tileAt([this.x + 1, this.y + 1])\r\n\r\n      let topLeft = topLeftTile.name === this.name\r\n      let topRight = topRightTile.name === this.name\r\n      let bottomLeft = bottomLeftTile.name === this.name\r\n      let bottomRight = bottomRightTile.name === this.name\r\n\r\n      if (!right) this.texPosition[0] = 9\r\n      if (!bottom) this.texPosition[1] = 4\r\n      if (!top)    this.texPosition[1] = 2\r\n      if (top && bottom) this.texPosition[1] = 3\r\n    }\r\n  }],\r\n\r\n  ['?', class QBlockTile extends Tile {\r\n    i: number\r\n\r\n    constructor(game) {\r\n      super(game, {\r\n        name: '? Block',\r\n        texPosition: [0, 4],\r\n        solid: true\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      this.i = 0\r\n    }\r\n\r\n    onUpdate() {\r\n      this.i += 0.1\r\n      if(this.i >= 4) this.i = 0\r\n      this.texPosition[0] = Math.max(Math.floor(this.i), 0)\r\n    }\r\n\r\n    onAirPunch() {\r\n      new window.Audio('sound/smw_shell_ricochet.wav').play()\r\n\r\n      if (this.game && this.x && this.y) {\r\n        const tile = new (Tile.get('x'))(this.game)\r\n        const usedBlock = this.game.level.replaceTile([this.x, this.y], tile)\r\n        usedBlock.dy = -0.5 * Tile.size\r\n\r\n        let [x, y] = this.game.level.getAbsolutePosition([this.x, this.y])\r\n        let shroom = new Mushroom(this.game, x, 0)\r\n        shroom.y = y - shroom.h - 1\r\n        shroom.yv = -1.5\r\n        this.game.entities.push(shroom)\r\n      }\r\n    }\r\n  }],\r\n\r\n  ['x', class UsedBlockTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Used Block',\r\n        texPosition: [4, 4],\r\n        solid: true,\r\n      })\r\n    }\r\n\r\n    onAirPunch() {\r\n      let snd = new window.Audio('sound/smw_shell_ricochet.wav')\r\n      snd.volume = 0.5\r\n      snd.play()\r\n    }\r\n\r\n    onUpdate() {\r\n      if(this.dy < 0) this.dy = Math.ceil(this.dy * 0.9)\r\n      else this.dy = 0\r\n    }\r\n  }],\r\n\r\n  ['*', class InvisibleBlockTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Invisible Block',\r\n        texPosition: [0, 0],\r\n        solid: true\r\n      })\r\n    }\r\n  }],\r\n\r\n  ['~', class DonutTile extends Tile {\r\n    fallVelocity: number\r\n    fallCountdown: number\r\n    falling: boolean\r\n    lastStoodOn: number\r\n\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Donut Block',\r\n        texPosition: [4, 3],\r\n        solid: false,\r\n        solidTop: true\r\n      })\r\n\r\n      this.fallVelocity = 0\r\n      this.fallCountdown = 40\r\n      this.falling = false\r\n      this.lastStoodOn = Date.now()\r\n    }\r\n\r\n    onUpdate() {\r\n      if (this.falling) {\r\n        this.dy += this.fallVelocity\r\n        this.dx = 0\r\n\r\n        if (this.fallVelocity < 6) {\r\n          this.fallVelocity += 0.3\r\n        }\r\n      }\r\n\r\n      if (this.lastStoodOn - Date.now() < -5 && !this.falling) {\r\n        // no longer\r\n        this.texPosition = [4, 3]\r\n        this.fallCountdown = 40\r\n        this.dx = 0\r\n        this.dy = 0\r\n      }\r\n\r\n      if (this.lastStoodOn - Date.now() < -2500 && this.falling) {\r\n        this.solidTop = true\r\n        this.dx = 0\r\n        this.dy = 0\r\n        this.fallCountdown = 40\r\n        this.texPosition = [4, 3]\r\n        this.fallVelocity = 0\r\n        this.falling = false\r\n      }\r\n    }\r\n\r\n    onStand() {\r\n      this.fallCountdown--\r\n      if (this.fallCountdown <= 0) {\r\n        this.falling = true\r\n        this.solidTop = false\r\n      } else {\r\n        this.dx = rnd(-2, 2)\r\n        this.dy = rnd(-2, 2)\r\n      }\r\n\r\n      this.lastStoodOn = Date.now()\r\n      this.texPosition = [4, 2]\r\n    }\r\n  }],\r\n\r\n  ['-', class AirTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Air',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      let topTile    = this.game.level.tileAt([this.x, this.y - 1])\r\n      let bottomTile = this.game.level.tileAt([this.x, this.y + 1])\r\n      let leftTile   = this.game.level.tileAt([this.x - 1, this.y])\r\n      let rightTile  = this.game.level.tileAt([this.x + 1, this.y])\r\n\r\n      let topLeftTile = this.game.level.tileAt([this.x - 1, this.y - 1])\r\n      let topRightTile = this.game.level.tileAt([this.x + 1, this.y - 1])\r\n      let bottomLeftTile = this.game.level.tileAt([this.x - 1, this.y + 1])\r\n      let bottomRightTile = this.game.level.tileAt([this.x + 1, this.y + 1])\r\n\r\n      // if below us is the [centre, top] of ground, randomly place foliage\r\n      if(bottomTile.name === 'Ground' && bottomLeftTile.name === 'Ground' && bottomRightTile.name === 'Ground') {\r\n        let foliage = rnd(0, 4) // 1 in 5 chance of any at all\r\n\r\n        if(foliage === 0) {\r\n          let what = rnd(0, 4) // random piece\r\n\r\n          if(what === 0) {\r\n            if(topTile.name !== this.name) return\r\n\r\n            // tree!\r\n            this.texPosition = [0, 1]\r\n            topTile.texPosition = [1, 0]\r\n\r\n          } else {\r\n            this.texPosition = [what, 1]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }],\r\n\r\n  ['C', class CloudTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Cloud',\r\n        texPosition: [4, 1],\r\n        solidTop: true,\r\n      })\r\n    }\r\n  }],\r\n\r\n  ['0', class CoinTile extends Tile {\r\n    i: number\r\n\r\n    coinSound: window.Audio\r\n\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Coin',\r\n        texPosition: [0, 3],\r\n      })\r\n\r\n      this.coinSound = new window.Audio('sound/smw_coin.wav')\r\n    }\r\n\r\n    onCreate() {\r\n      this.i = 0\r\n\r\n      const tile = new (Tile.get('-'))(this.game)\r\n      const coin = new Coin(this.game)\r\n      const [x, y] = this.game.level.getAbsolutePosition([this.x, this.y])\r\n      coin.x = x\r\n      coin.y = y - coin.h + Tile.size - 1 // directly on top\r\n\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n      this.game.entities.push(coin)\r\n    }\r\n\r\n    onUpdate() {\r\n      this.i += 0.1\r\n      if (this.i >= 4) this.i = 0\r\n\r\n      this.texPosition[0] = Math.max(Math.floor(this.i), 0)\r\n    }\r\n\r\n    onTouch(by: Entity) {\r\n      if(by instanceof Player) {\r\n        // TODO add 1 to coins\r\n\r\n        // replace this tile with Air\r\n        const tile = new (Tile.get('-'))(this.game)\r\n        this.game.level.replaceTile([this.x, this.y], tile)\r\n        this.coinSound.play()\r\n      }\r\n    }\r\n  }],\r\n\r\n  ['@', class PlayerTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Player',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // place the player here\r\n      const [x, y] = this.game.level.getAbsolutePosition([this.x, this.y])\r\n      this.game.player.x = x\r\n      this.game.player.y = y - this.game.player.h + Tile.size - 1 // directly\r\n                                                                  // on top\r\n\r\n      // replace this tile with Air\r\n      const tile = new (Tile.get('-'))(this.game)\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n\r\n  ['>', class SignTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Sign',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // place a sign here\r\n      let sign = new Sign(this.game)\r\n      const [x, y] = this.game.level.getAbsolutePosition([this.x, this.y])\r\n      sign.x = x\r\n      sign.y = y - sign.h + Tile.size - 2 // 1 block above top\r\n\r\n      // replace this tile with Air\r\n      const tile = new (Tile.get('-'))(this.game)\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n\r\n  ['G', class GoombaTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Goomba',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // place a goomba here\r\n      let goomba = new Goomba(this.game)\r\n      const [x, y] = this.game.level.getAbsolutePosition([this.x, this.y])\r\n      goomba.x = x\r\n      goomba.y = y - goomba.h + Tile.size - 1 // directly on top\r\n\r\n      this.game.entities.push(goomba)\r\n\r\n      // replace this tile with Air\r\n      const tile = new (Tile.get('-'))(this.game)\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n\r\n  ['#', class DeathZoneTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Death Zone',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onTouch(by: Entity) {\r\n      by.destroy()\r\n    }\r\n  }],\r\n  \r\n  // World tiles ///////////////////////////////////////////////////////////////\r\n  \r\n  ['W ~', class WorldWaterTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Water',\r\n        texPosition: [0, 15],\r\n      })\r\n      \r\n      this.solid = true\r\n    }\r\n  }],\r\n  \r\n  ['W  ', class WorldGroundTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Ground',\r\n        texPosition: [1, 13],\r\n      })\r\n      \r\n      this.solid = true\r\n    }\r\n    \r\n    onUpdate() {\r\n      let topTile    = this.game.level.tileAt([this.x, this.y - 1])\r\n      let bottomTile = this.game.level.tileAt([this.x, this.y + 1])\r\n      let leftTile   = this.game.level.tileAt([this.x - 1, this.y])\r\n      let rightTile  = this.game.level.tileAt([this.x + 1, this.y])\r\n\r\n      let top    = topTile.name    !== 'Water'\r\n      let bottom = bottomTile.name !== 'Water'\r\n      let left   = leftTile.name   !== 'Water'\r\n      let right  = rightTile.name  !== 'Water'\r\n\r\n      let topLeftTile = this.game.level.tileAt([this.x - 1, this.y - 1])\r\n      let topRightTile = this.game.level.tileAt([this.x + 1, this.y - 1])\r\n      let bottomLeftTile = this.game.level.tileAt([this.x - 1, this.y + 1])\r\n      let bottomRightTile = this.game.level.tileAt([this.x + 1, this.y + 1])\r\n\r\n      let topLeft = topLeftTile.name !== 'Water'\r\n      let topRight = topRightTile.name !== 'Water'\r\n      let bottomLeft = bottomLeftTile.name !== 'Water'\r\n      let bottomRight = bottomRightTile.name !== 'Water'\r\n      \r\n      if(!left && top && right && bottom) this.texPosition = [0, 13]\r\n      if(left && top && !right && bottom) this.texPosition = [2, 13]\r\n      if(left && !top && right && bottom) this.texPosition = [1, 12]\r\n      if(left && top && right && !bottom) this.texPosition = [1, 14]\r\n      \r\n      if(left && !top && !right && bottom) this.texPosition = [2, 12]\r\n      if(!left && !top && right && bottom) this.texPosition = [0, 12]\r\n      if(left && top && !right && !bottom) this.texPosition = [2, 14]\r\n      if(!left && top && right && !bottom) this.texPosition = [0, 14]\r\n      \r\n      if(left && top && right && bottom && !topRight) {\r\n        this.texPosition = [3, 13]\r\n      }\r\n      \r\n      if(left && top && right && bottom && !topLeft) {\r\n        this.texPosition = [4, 13]\r\n      }\r\n      \r\n      if(left && top && right && bottom && !bottomRight) {\r\n        this.texPosition = [3, 12]\r\n      }\r\n      \r\n      if(left && top && right && bottom && !bottomLeft) {\r\n        this.texPosition = [4, 12]\r\n      }\r\n    }\r\n  }],\r\n  \r\n  ['W @', class WorldPlayerTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Player',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // place the player here\r\n      const [x, y] = this.game.level.getAbsolutePosition([this.x, this.y])\r\n      this.game.player.x = x\r\n      this.game.player.y = y// - this.game.player.h + Tile.size\r\n      \r\n      // replace this tile with a pipe\r\n      const tile = new (Tile.get('W P'))(this.game)\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n  \r\n  ['W :', class WorldFenceTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Fence',\r\n        texPosition: [4, 14],\r\n      })\r\n      \r\n      this.solid = true\r\n    }\r\n  }],\r\n  \r\n  ['W .', class WorldFlowerTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Flower',\r\n        texPosition: [3, 14],\r\n      })\r\n      \r\n      this.solid = true\r\n    }\r\n  }],\r\n  \r\n  ['W P', class WorldPipeTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Pipe',\r\n        texPosition: [0, 11],\r\n      })\r\n    }\r\n  }],\r\n  \r\n  ['W H', class WorldHouseTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'House',\r\n        texPosition: [1, 11],\r\n      })\r\n    }\r\n  }],\r\n  \r\n  ['W -', class WorldPathTile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Path',\r\n        texPosition: [1, 9],\r\n      })\r\n    }\r\n    \r\n    onUpdate() {\r\n      let topTile    = this.game.level.tileAt([this.x, this.y - 1])\r\n      let bottomTile = this.game.level.tileAt([this.x, this.y + 1])\r\n      let leftTile   = this.game.level.tileAt([this.x - 1, this.y])\r\n      let rightTile  = this.game.level.tileAt([this.x + 1, this.y])\r\n\r\n      const k = [this.name, 'Level', 'Pipe']\r\n\r\n      let top    = k.includes(topTile.name)\r\n      let bottom = k.includes(bottomTile.name)\r\n      let left   = k.includes(leftTile.name)\r\n      let right  = k.includes(rightTile.name)\r\n      \r\n      if(top && !left && !right && bottom) this.texPosition = [2, 8]\r\n      if(top && left && !right && !bottom) this.texPosition = [3, 9]\r\n      if(top && !left && right && bottom) this.texPosition = [2, 10]\r\n      if(!top && !left && right && bottom) this.texPosition = [3, 8]\r\n      if(top && !left && right && !bottom) this.texPosition = [1, 8]\r\n      if(!top && left && !right && bottom) this.texPosition = [1, 10]\r\n    }\r\n  }],\r\n  \r\n  ['W lv', class WorldLevelTile extends Tile {\r\n    complete: boolean\r\n    \r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Level',\r\n        texPosition: [2, 9],\r\n      })\r\n      \r\n      this.complete = false\r\n    }\r\n    \r\n    onUpdate() {\r\n      this.texPosition = this.complete ?  [2, 9] : [3, 10]\r\n    }\r\n  }],\r\n  \r\n  ['W 1', class WorldLevel1Tile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Level 1',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // replace this tile with a level tile\r\n      const tile = new (Tile.get('W lv'))(this.game)\r\n      tile.levelid = 1\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n  \r\n  ['W 2', class WorldLevel2Tile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Level 2',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // replace this tile with a level tile\r\n      const tile = new (Tile.get('W lv'))(this.game)\r\n      tile.levelid = 2\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n  \r\n  ['W 3', class WorldLevel3Tile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Level 3',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // replace this tile with a level tile\r\n      const tile = new (Tile.get('W lv'))(this.game)\r\n      tile.levelid = 3\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n  \r\n  ['W 4', class WorldLevel4Tile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Level 4',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // replace this tile with a level tile\r\n      const tile = new (Tile.get('W lv'))(this.game)\r\n      tile.levelid = 4\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n  \r\n  ['W 5', class WorldLevel5Tile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Level 5',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // replace this tile with a level tile\r\n      const tile = new (Tile.get('W lv'))(this.game)\r\n      tile.levelid = 5\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n  \r\n  ['W 6', class WorldLevel6Tile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Level 6',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // replace this tile with a level tile\r\n      const tile = new (Tile.get('W lv'))(this.game)\r\n      tile.levelid = 6\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n  \r\n  ['W 7', class WorldLevel7Tile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Level 7',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // replace this tile with a level tile\r\n      const tile = new (Tile.get('W lv'))(this.game)\r\n      tile.levelid = 7\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n  \r\n  ['W 8', class WorldLevel8Tile extends Tile {\r\n    constructor(game) {\r\n      super(game, {\r\n        name: 'Level 8',\r\n        texPosition: [0, 0],\r\n      })\r\n    }\r\n\r\n    onCreate() {\r\n      // replace this tile with a level tile\r\n      const tile = new (Tile.get('W lv'))(this.game)\r\n      tile.levelid = 8\r\n      this.game.level.replaceTile([this.x, this.y], tile)\r\n    }\r\n  }],\r\n])\r\n\r\nTile.size = 16\r\n","import SLW from './SLW'\r\n\r\nwindow.addEventListener('load', e => {\r\n  let tileset = new Image\r\n\r\n  tileset.onload = () => {\r\n    const game = new SLW('F', tileset)\r\n\r\n    window.game = game // debug only pls\r\n    document.body.appendChild(game.canvas)\r\n\r\n    game.tileset = tileset\r\n    game.canvas.focus()\r\n\r\n    let didTick = false\r\n\r\n    !(function render() {\r\n      requestAnimationFrame(render)\r\n\r\n      if(document.hasFocus()) { // don't update if we're in devtools\r\n        // Very deliberate order:\r\n        game.player.update()\r\n        game.cameraUpdate()\r\n        game.level.update()\r\n        game.entityUpdate()\r\n\r\n        game.canvasClear()\r\n        game.draw()\r\n      }\r\n    })()\r\n  }\r\n\r\n  tileset.src = 'tileset.png'\r\n})\r\n","module.exports = \"# Worlds & Levels..\\r\\n\\r\\n[F]\\r\\nid=\\\"F\\\"\\r\\nname=\\\"Flower Gardens\\\"\\r\\nmusic=\\\"flower-gardens\\\"\\r\\nspecial=[\\\"world\\\"]\\r\\nbackground=\\\"none\\\"\\r\\ntilemap = \\\"\\\"\\\"\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  @ ..   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~        ~~~   ~~~   - ...       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~     --7--  ~  P ~~~ . -      ..   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~   ::: -   -     -  ~~ . 1---------    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~  6------ ~ ------8  ~~ . ::      :- .  ~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~   -                            ..  -   ~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~ --- ... H      ..   : 3------------2  ~~~  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~ -    ...  :           -              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~ -:::             : ----    ~~~~~    ~~    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~  5-------------- .. -       ~~~~~~~~~~  :H   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~             :: -----4   ...  ~~~~~~~~~  .    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~     .....    -        ...      ~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~    ...    --H ~~~           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~            ~~~ H ::   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\r\\n\\\"\\\"\\\"\\r\\n\\r\\n\\r\\n[F-1]\\r\\nworld=\\\"F\\\"\\r\\nid=1\\r\\nname=\\\"Typical Beginnings\\\"\\r\\n\\r\\nmusic=\\\"grassland\\\"\\r\\nspecial=[]\\r\\nbackground=\\\"hills\\\"\\r\\ntilemap = \\\"\\\"\\\"\\r\\n=----------------------------------------------------------------------------------=\\r\\n=----------------------------------------------------------------------------------=\\r\\n=----------------------------------------------------------------------------------=\\r\\n=----------------------------------------------------------------------------------=\\r\\n=----------------------------------------------------------------------------------=\\r\\n=----------------------------------------------------------------------------------=\\r\\n=----------------------------------------------------------------------------------=\\r\\n=----------------------------------------------------------------------------------=\\r\\n=------------------------------------------------------------------------==--------=\\r\\n=------------------------------------------------------------------------==~~~======\\r\\n=-----------------------------------------------------------------------------======\\r\\n=--------------------------------------------------------------------------------===\\r\\n=------------------------------------------------------------=========-------------=\\r\\n=-----------------------------------------------------------===========------------=\\r\\n=-----------------------------------------------------------===========---CC-------=\\r\\n=------------------------------------------------------------===========-----------=\\r\\n=-----------------------------------000-------------------------========-----------=\\r\\n=----------------------------------0------------------------------======-----CCC---=\\r\\n=----------000--------------------0--=========~~~~====xxx====-=-=-=====------------=\\r\\n=------------------------------------======--------=========-----------------------=\\r\\n=----------x??x----------------------====-----------=======---------------------PP-=\\r\\n=----------------------------0---========------------======--00000000-----PP----PP-=\\r\\n=-------------------------000---=========-G---------=======--00000000--PP-PP----PP-=\\r\\n=---@->------------------------============================------------PP-PP-------=\\r\\n=============================================================================------=\\r\\n=============================================================================------=\\r\\n=============================================================================######=\\r\\n\\\"\\\"\\\"\\r\\n\\r\\n[F-2]\\r\\nworld=\\\"F\\\"\\r\\nid=2\\r\\nname=\\\"Debug Land\\\"\\r\\n\\r\\nmusic=\\\"athletic\\\"\\r\\nspecial=[\\\"floating\\\"]\\r\\ndebug=true\\r\\nbackground=\\\"clouds\\\"\\r\\ntilemap = \\\"\\\"\\\"\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-------------------------------------------=\\r\\n=-----------------@-------------------------=\\r\\n=---------------xxxxxx----------------------=\\r\\n=----------------------------------x--x-----=\\r\\n=------------------------x----x-------------=\\r\\n=--------?---------------xxxxxxxxxxxxxx-----=\\r\\n=-------------------------------x-----------=\\r\\n=-------------------------------x-----------=\\r\\n=-----xxxxxxxxx-------->--------x-----------=\\r\\n=---------------------xxx*****xxx-----------=\\r\\n=---------------xxxxxxx---------------------=\\r\\n=-------------------xxx---------------------=\\r\\n=-------------------------------------------=\\r\\n=--======================-----============--=\\r\\n=--======================-----============--=\\r\\n=##======================-----============##=\\r\\n\\\"\\\"\\\"\\r\\n\";\n","// @flow\r\n// General utility functions.\r\n\r\n// Gets the sign of a number, as a number. If the given number is negative,\r\n// it returns -1, if positive, 1, and if zero, 0.\r\nexport function sign(n: number): number {\r\n  if (n > 0) return 1\r\n  if (n < 0) return -1\r\n  return 0\r\n}\r\n\r\n// Returns a random integer from `min` through `max`.\r\nexport function rnd(min: number, max: number): number {\r\n  return Math.floor(Math.random() * max) + min\r\n}\r\n\r\n// Returns an image written over by a colour, taking an operation type and alpha.\r\n// Default values useful for masking.\r\nexport function tint(img: Image, colour: string, operation: string = 'source-in', alpha: number = 1) {\r\n  // create hidden canvas (using image dimensions)\r\n  let canvas = document.createElement('canvas')\r\n  canvas.width = img.width\r\n  canvas.height = img.height\r\n\r\n  let ctx = canvas.getContext('2d')\r\n  if (!ctx) throw new TypeError('Failed to get new canvas context.')\r\n  ctx.drawImage(img, 0, 0)\r\n\r\n  // overlay filled rectangle using lighter composition\r\n  ctx.globalCompositeOperation = operation\r\n  ctx.globalAlpha = alpha\r\n  ctx.fillStyle = colour\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n  // return a new image\r\n  let res = new Image\r\n  res.src = canvas.toDataURL()\r\n  return res\r\n}\r\n\r\nconst toml = require('toml')\r\nexport const levels = toml.parse(require('./levels.toml'))\r\n"]}